/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.dialog;

import com.incosyz.sms.clientcontroller.ComboSearch;
import com.incosyz.sms.clientcontroller.DeliveryNoteControllerClient;
import com.incosyz.sms.clientcontroller.PriceAnnouncementControllerClient;
import com.incosyz.sms.clientcontroller.StockControllerClient;
import com.incosyz.sms.mixmodel.StockModel;
import com.incosyz.sms.model.BatchModel;
import com.incosyz.sms.model.BikeModel;
import com.incosyz.sms.model.DeliveryOrderDetailModel;
import com.incosyz.sms.model.Model;
import com.incosyz.sms.model.OrderModel;
import com.incosyz.sms.model.PriceAnnouncementModel;
import com.incosyz.sms.other.CurrancyFormat;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 * Date : Oct 27, 2015 Time : 7:35:54 PM
 *
 * @copyright INCOSYZ
 * @author Stelan
 */
public class ManageDeliveryOrderDetail extends javax.swing.JDialog {

    /**
     * Creates new form SpecialConsignment
     */
    public ManageDeliveryOrderDetail(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        deliveryOrderDetailModel = (DefaultTableModel) deliveryOrderDetailTable.getModel();
        this.models = new ArrayList<>();
        this.colours = new ArrayList<>();
        try {
            priceAnnouncement = PriceAnnouncementControllerClient.getPriceAnnouncement();
            for (PriceAnnouncementModel priceAnnouncementModel : priceAnnouncement) {
                priceAnnouncementCombo.addItem(priceAnnouncementModel.getPriceAnnouncementDate());
            }

            ArrayList<String> colours = DeliveryNoteControllerClient.getColours();
            if (colours != null) {
                for (String colour : colours) {
                    addColourToCombo(colour.toUpperCase());
                }
            }

        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
        }

        ComboSearch comboSearch = new ComboSearch();
        comboSearch.setSearchableCombo(modelNameCombo, true, "Model name is not found !");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deliveryOrderDetailTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        consignmentNoteNoCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        roundNoText = new javax.swing.JTextField();
        modelNameCombo = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        priceAnnouncementCombo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        colourCombo = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        engineNoText = new javax.swing.JTextField();
        chassisNoText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        remarkText = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        commission = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        netRemittance = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        addOption = new javax.swing.JButton();
        addOption1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        colourList = new javax.swing.JList();
        ViewModelPrice = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - Manage Delivery Order Detail");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 10, 550, 40);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 40, 230, 30);

        deliveryOrderDetailTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deliveryOrderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Round No", "Model Name ", "Colour", "Engine No", "Chassis No", "Remarks", "NO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deliveryOrderDetailTable.setRowHeight(25);
        deliveryOrderDetailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deliveryOrderDetailTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(deliveryOrderDetailTable);
        if (deliveryOrderDetailTable.getColumnModel().getColumnCount() > 0) {
            deliveryOrderDetailTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            deliveryOrderDetailTable.getColumnModel().getColumn(4).setPreferredWidth(150);
            deliveryOrderDetailTable.getColumnModel().getColumn(6).setPreferredWidth(10);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(260, 150, 750, 360);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/addToList.jpg"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        addButton.setBounds(130, 540, 110, 50);

        consignmentNoteNoCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        consignmentNoteNoCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                consignmentNoteNoComboItemStateChanged(evt);
            }
        });
        consignmentNoteNoCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consignmentNoteNoComboActionPerformed(evt);
            }
        });
        jPanel1.add(consignmentNoteNoCombo);
        consignmentNoteNoCombo.setBounds(810, 50, 200, 30);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 153, 153));
        jLabel5.setText("Round No :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(30, 90, 200, 30);

        roundNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundNoTextActionPerformed(evt);
            }
        });
        roundNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roundNoTextKeyReleased(evt);
            }
        });
        jPanel1.add(roundNoText);
        roundNoText.setBounds(30, 120, 210, 30);

        modelNameCombo.setEditable(true);
        modelNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameComboActionPerformed(evt);
            }
        });
        modelNameCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelNameComboKeyReleased(evt);
            }
        });
        jPanel1.add(modelNameCombo);
        modelNameCombo.setBounds(30, 180, 210, 30);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 153));
        jLabel7.setText("Model Name :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(30, 160, 200, 20);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Search Round No :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(810, 90, 200, 20);

        priceAnnouncementCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceAnnouncementCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priceAnnouncementComboItemStateChanged(evt);
            }
        });
        priceAnnouncementCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceAnnouncementComboActionPerformed(evt);
            }
        });
        jPanel1.add(priceAnnouncementCombo);
        priceAnnouncementCombo.setBounds(600, 50, 200, 30);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("Colour :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(30, 220, 200, 20);

        colourCombo.setEditable(true);
        colourCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                colourComboKeyReleased(evt);
            }
        });
        jPanel1.add(colourCombo);
        colourCombo.setBounds(30, 240, 160, 30);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("Engine No :");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(30, 350, 200, 20);

        engineNoText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        engineNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineNoTextActionPerformed(evt);
            }
        });
        jPanel1.add(engineNoText);
        engineNoText.setBounds(30, 370, 210, 30);

        chassisNoText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chassisNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chassisNoTextActionPerformed(evt);
            }
        });
        jPanel1.add(chassisNoText);
        chassisNoText.setBounds(30, 430, 210, 30);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Chassis No :");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(30, 410, 200, 20);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Remarks :");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(30, 470, 200, 20);

        remarkText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remarkTextActionPerformed(evt);
            }
        });
        jPanel1.add(remarkText);
        remarkText.setBounds(30, 490, 210, 30);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("All Inclusive Reail Price :");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(340, 530, 200, 30);

        price.setEditable(false);
        price.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(price);
        price.setBounds(340, 560, 210, 30);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Commission On Retainded :");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(560, 530, 200, 30);

        commission.setEditable(false);
        commission.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(commission);
        commission.setBounds(560, 560, 220, 30);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setText("Net Remittance :");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(790, 530, 200, 30);

        netRemittance.setEditable(false);
        netRemittance.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(netRemittance);
        netRemittance.setBounds(790, 560, 220, 30);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/manageColours.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(260, 90, 110, 50);

        addOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/add.jpg"))); // NOI18N
        addOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOptionActionPerformed(evt);
            }
        });
        jPanel1.add(addOption);
        addOption.setBounds(200, 240, 40, 30);

        addOption1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/delete.jpg"))); // NOI18N
        addOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOption1ActionPerformed(evt);
            }
        });
        jPanel1.add(addOption1);
        addOption1.setBounds(200, 280, 40, 30);

        jScrollPane2.setViewportView(colourList);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(30, 280, 160, 60);

        ViewModelPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/viewPriceAnnouncement.jpg"))); // NOI18N
        ViewModelPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewModelPriceActionPerformed(evt);
            }
        });
        jPanel1.add(ViewModelPrice);
        ViewModelPrice.setBounds(380, 90, 140, 50);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/deleteRow.jpg"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(530, 90, 110, 50);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/clear.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(650, 90, 110, 50);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel16.setText("Consignment Note No :");
        jPanel1.add(jLabel16);
        jLabel16.setBounds(810, 20, 200, 30);

        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });
        jPanel1.add(searchText);
        searchText.setBounds(810, 110, 200, 30);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel17.setText("Price Announcement :");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(600, 20, 200, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1041, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        String roundNo = roundNoText.getText();
        if (roundNo.equals("")) {
            JOptionPane.showMessageDialog(this, "Round No is required !");
            return;
        }

        if (!roundNo.equals("")) {
            try {
                boolean isExists = DeliveryNoteControllerClient.isExistsRoundNo(roundNo);
                if (isExists) {
                    JOptionPane.showMessageDialog(this, "Round No is exists. change round no !");
                    return;
                }
            } catch (NotBoundException | MalformedURLException | ClassNotFoundException | RemoteException | SQLException ex) {
                Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        String modelId = "";
        if (selectedModel != null) {
            modelId = selectedModel.getModelId();
        } else {
            JOptionPane.showMessageDialog(this, "ModelName is invalid !");
            return;
        }

        String batchId = selectedBatchId;
        String colour = getColourLine();
        String engineNo = engineNoText.getText().toUpperCase();
        String chassisNo = chassisNoText.getText().toUpperCase();
        String remark = remarkText.getText();
        String note = "";
        DeliveryOrderDetailModel deliveryOrderDetailModel = new DeliveryOrderDetailModel()
                .setModelId(modelId)
                .setBatchId(batchId)
                .setModelName((String) modelNameCombo.getSelectedItem())
                .setRoundNo(roundNo)
                .setColour(colour)
                .setEngineNo(engineNo)
                .setRemark(remark)
                .setNote(note)
                .setChassisNo(chassisNo);

        try {
            boolean addDeliveryOrderDetail = DeliveryNoteControllerClient.addDeliveryOrderDetail(deliveryOrderDetailModel);
            if (addDeliveryOrderDetail) {
                addModelToTable(deliveryOrderDetailModel);
                jButton3.doClick();
                JOptionPane.showMessageDialog(this, "Delivery Order Detail Added Successfully !");
            }
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | RemoteException | SQLException ex) {
            Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void consignmentNoteNoComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_consignmentNoteNoComboItemStateChanged

    }//GEN-LAST:event_consignmentNoteNoComboItemStateChanged

    private void consignmentNoteNoComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consignmentNoteNoComboActionPerformed
        selectedBatchId = getSelectedBatchId();
        try {
            setOrderDetail(selectedBatchId);
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | RemoteException | SQLException ex) {
            Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_consignmentNoteNoComboActionPerformed

    private void modelNameComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelNameComboKeyReleased

    }//GEN-LAST:event_modelNameComboKeyReleased

    private void priceAnnouncementComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priceAnnouncementComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_priceAnnouncementComboItemStateChanged

    private void priceAnnouncementComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceAnnouncementComboActionPerformed
        String announcementId = getSelectedPriceAnnouncementId();
        try {
            this.models = new ArrayList<>();
            ArrayList<Model> models = PriceAnnouncementControllerClient.getAnnouncementsModel(announcementId);
            modelNameCombo.removeAllItems();
            for (Model model : models) {
                addModelToCombo(model);
            }

            Model model = getSelectedModel();
            if (model != null) {
                selectedModel = model;
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_priceAnnouncementComboActionPerformed

    private void colourComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_colourComboKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_colourComboKeyReleased

    private void modelNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameComboActionPerformed
        Model model = getSelectedModel();
        if (model != null) {
            selectedModel = model;
        }
    }//GEN-LAST:event_modelNameComboActionPerformed
    private BikeModel bikeModelSelected;
    private void deliveryOrderDetailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveryOrderDetailTableMouseClicked
        String modelName = (String) deliveryOrderDetailModel.getValueAt(deliveryOrderDetailTable.getSelectedRow(), 1);
        String modelId = getModelId(modelName);
        String priceAnnounceId = selectedPriceAnnouncementId;
        try {
            ArrayList<BikeModel> bikeModels = DeliveryNoteControllerClient.getBikeModel(modelId, priceAnnounceId);
            for (BikeModel bikeModel : bikeModels) {
                double netPrice = Double.parseDouble(bikeModel.getNetAmount());
                double comm = Double.parseDouble(bikeModel.getCommision());

                this.bikeModelSelected = bikeModel;

                price.setText("Rs " + CurrancyFormat.getCurrancyFormat(netPrice));
                commission.setText("Rs " + CurrancyFormat.getCurrancyFormat(comm));
                netRemittance.setText("Rs " + CurrancyFormat.getCurrancyFormat(netPrice - comm));
            }
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | RemoteException | SQLException ex) {
            Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deliveryOrderDetailTableMouseClicked

    private void addOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOptionActionPerformed
        ListModel model = colourList.getModel();
        DefaultListModel defaultListModel = new DefaultListModel();
        String optionName = (String) colourCombo.getSelectedItem();
        boolean isExists = false;
        for (int i = 0; i < model.getSize(); i++) {
            defaultListModel.addElement(model.getElementAt(i));
            if (optionName.equals(model.getElementAt(i))) {
                isExists = true;
            }
        }
        if (!isExists) {
            defaultListModel.addElement(colourCombo.getSelectedItem());
        } else {
            JOptionPane.showMessageDialog(this, "Option is already exists !");
        }
        colourList.setModel(defaultListModel);
    }//GEN-LAST:event_addOptionActionPerformed

    private void addOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOption1ActionPerformed
        if (colourList.getSelectedIndex() != -1) {
            DefaultListModel model = (DefaultListModel) colourList.getModel();
            model.remove(colourList.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(this, "Select Option To Delete !");
        }
    }//GEN-LAST:event_addOption1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddNewColour addNewColour = new AddNewColour(null, true);
        addNewColour.setParentFrame(this);
        addNewColour.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ViewModelPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewModelPriceActionPerformed
        StockModel modelSelected = getBikeDetail((String) deliveryOrderDetailModel.getValueAt(deliveryOrderDetailTable.getSelectedRow(), 0));
        if (modelSelected != null && bikeModelSelected != null) {
            ViewDeliveryOrderDetail deliveryOrderDetail = new ViewDeliveryOrderDetail(null, true);
            deliveryOrderDetail.setFramePanel(modelSelected, bikeModelSelected);
            deliveryOrderDetail.setVisible(true);
        }


    }//GEN-LAST:event_ViewModelPriceActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (deliveryOrderDetailTable.getSelectedRow() > -1) {
            String roundNo = (String) deliveryOrderDetailModel.getValueAt(deliveryOrderDetailTable.getSelectedRow(), 0);
            try {
                OrderModel order = StockControllerClient.getOrder(roundNo);
                if (order != null) {
                    ItemDelete delete = new ItemDelete(null, true);
                    delete.setDetail(order);
                    delete.setModelToDelete(deliveryOrderDetailModel, deliveryOrderDetailTable.getSelectedRow());
                    delete.setVisible(true);
                } else {
                    int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you sure to delete round number from stock ?");
                    if (showConfirmDialog == JOptionPane.YES_OPTION) {
                        boolean deleted = StockControllerClient.deleteStock(roundNo);
                        if (deleted) {
                            deliveryOrderDetailModel.removeRow(deliveryOrderDetailTable.getSelectedRow());
                            JOptionPane.showMessageDialog(this, "Item deleted successfully !");
                        }
                    }
                }

            } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
                Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select Row to delete !");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        roundNoText.setText("");
        engineNoText.setText("");
        chassisNoText.setText("");
        remarkText.setText("");
        ListModel listModel = new DefaultListModel();
        colourList.setModel(listModel);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void roundNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundNoTextActionPerformed
        modelNameCombo.requestFocus();
    }//GEN-LAST:event_roundNoTextActionPerformed

    private void engineNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineNoTextActionPerformed
        chassisNoText.requestFocus();
    }//GEN-LAST:event_engineNoTextActionPerformed

    private void chassisNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chassisNoTextActionPerformed
        remarkText.requestFocus();
    }//GEN-LAST:event_chassisNoTextActionPerformed

    private void remarkTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remarkTextActionPerformed
        addButton.doClick();
    }//GEN-LAST:event_remarkTextActionPerformed

    private void roundNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roundNoTextKeyReleased

    }//GEN-LAST:event_roundNoTextKeyReleased

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        deliveryOrderDetailModel.setRowCount(0);
        String roundNo = searchText.getText();
        
        for (StockModel stockModel : stockModels) {
            if (!stockModel.getRoundNo().contains(roundNo)) {
                continue;
            }
            DeliveryOrderDetailModel deliveryOrderDetailModel = new DeliveryOrderDetailModel()
                    .setModelName(stockModel.getModelName())
                    .setModelId(stockModel.getModelId())
                    .setBatchId(stockModel.getBatchId())
                    .setRoundNo(stockModel.getRoundNo())
                    .setColour(stockModel.getColour())
                    .setEngineNo(stockModel.getEngineNo())
                    .setRemark(stockModel.getRemark())
                    .setChassisNo(stockModel.getChassisNo());
            addModelToTable(deliveryOrderDetailModel);
        }
    }//GEN-LAST:event_searchTextKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageDeliveryOrderDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageDeliveryOrderDetail dialog = new ManageDeliveryOrderDetail(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ViewModelPrice;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addOption;
    private javax.swing.JButton addOption1;
    private javax.swing.JTextField chassisNoText;
    private javax.swing.JComboBox colourCombo;
    private javax.swing.JList colourList;
    private javax.swing.JTextField commission;
    private javax.swing.JComboBox consignmentNoteNoCombo;
    private javax.swing.JTable deliveryOrderDetailTable;
    private javax.swing.JTextField engineNoText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox modelNameCombo;
    private javax.swing.JTextField netRemittance;
    private javax.swing.JTextField price;
    private javax.swing.JComboBox priceAnnouncementCombo;
    private javax.swing.JTextField remarkText;
    private javax.swing.JTextField roundNoText;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables

    private ArrayList<PriceAnnouncementModel> priceAnnouncement;
    private BatchModel batchModel;
    private DefaultTableModel deliveryOrderDetailModel;
    private String selectedPriceAnnouncementId;
    private ArrayList<BatchModel> batchModels;
    private ArrayList<BikeModel> bikeModels;
    private String selectedBatchId;
    private String selectedModelId;
    private ArrayList<String> colours;
    private ArrayList<Model> models;
    private Model selectedModel;

    /**
     * store all details about bike.
     */
    private ArrayList<StockModel> stockModels;

    /**
     * get batch model from Manage delivery order form.
     *
     * @param batchModel
     * @param batchModels
     */
    public void setParentFrame(BatchModel batchModel, ArrayList<BatchModel> batchModels) {
        this.batchModel = batchModel;
        this.batchModels = batchModels;
        selectedBatchId = batchModel.getBatchId();
        setConsignmentComboData();
        consignmentNoteNoCombo.setSelectedItem(batchModel.getConsignmentNoteNo());
    }

    public void setOrderDetail(String batchId) throws MalformedURLException, NotBoundException, ClassNotFoundException, RemoteException, SQLException {
        stockModels = DeliveryNoteControllerClient.getAllOrderDetail(batchId);
        deliveryOrderDetailModel.setRowCount(0);
        for (StockModel stockModel : stockModels) {
            DeliveryOrderDetailModel deliveryOrderDetailModel = new DeliveryOrderDetailModel()
                    .setModelName(stockModel.getModelName())
                    .setModelId(stockModel.getModelId())
                    .setBatchId(stockModel.getBatchId())
                    .setRoundNo(stockModel.getRoundNo())
                    .setColour(stockModel.getColour())
                    .setEngineNo(stockModel.getEngineNo())
                    .setRemark(stockModel.getRemark())
                    .setChassisNo(stockModel.getChassisNo());
            addModelToTable(deliveryOrderDetailModel);
        }
    }

    /**
     * return bike information
     *
     * @param roundNo
     * @return
     */
    public StockModel getBikeDetail(String roundNo) {
        for (StockModel stockModel : stockModels) {
            if (stockModel.getRoundNo().equals(roundNo)) {
                return stockModel;
            }
        }
        return null;
    }

    public void setParentFrame(BatchModel batchModel) {
        this.batchModel = batchModel;
    }

    public void setConsignmentComboData() {
        for (BatchModel batchModel : batchModels) {
            consignmentNoteNoCombo.addItem(batchModel.getConsignmentNoteNo());
        }
    }

    public void addModelToTable(DeliveryOrderDetailModel deliveryOrderDetailModel) {
        Object[] row = {deliveryOrderDetailModel.getRoundNo(), deliveryOrderDetailModel.getModelName().toUpperCase(), deliveryOrderDetailModel.getColour(), deliveryOrderDetailModel.getEngineNo(), deliveryOrderDetailModel.getChassisNo(), deliveryOrderDetailModel.getRemark(), String.valueOf(deliveryOrderDetailTable.getRowCount() + 1)};
        this.deliveryOrderDetailModel.addRow(row);
    }

    public void addModelToCombo(Model model) {
        modelNameCombo.addItem(model.getModelName());
        models.add(model);
    }

    public String getSelectedPriceAnnouncementId() {
        String priceAnnouncementDate = (String) priceAnnouncementCombo.getSelectedItem();
        for (int i = 0; i < priceAnnouncement.size(); i++) {
            if (priceAnnouncement.get(i).getPriceAnnouncementDate().equals(priceAnnouncementDate)) {
                selectedPriceAnnouncementId = priceAnnouncement.get(i).getPriceAnnouncementId();
                return selectedPriceAnnouncementId;
            }
        }
        return selectedPriceAnnouncementId;
    }

    public String getSelectedBatchId() {
        String consignmentNo = (String) consignmentNoteNoCombo.getSelectedItem();
        for (BatchModel batchModel : batchModels) {
            if (batchModel.getConsignmentNoteNo().equals(consignmentNo)) {
                return batchModel.getBatchId();
            }
        }
        return null;
    }

    public void addColourToCombo(String colour) {
        colourCombo.addItem(colour);
        colours.add(colour);
    }

    public String getColourLine() {
        ListModel model = colourList.getModel();
        String colourLine = "";
        DefaultListModel defaultListModel = new DefaultListModel();
        for (int i = 0; i < model.getSize(); i++) {
            colourLine += model.getElementAt(i) + " - ";
        }
        if (colourLine != "") {
            colourLine = colourLine.substring(0, colourLine.length() - 2);
            return colourLine;
        }
        return "";
    }

    /**
     * Return selected model table detailF
     *
     * @return
     */
    public Model getSelectedModel() {
        String modelName = (String) modelNameCombo.getSelectedItem();
        if (modelName != null) {
            for (Model model : models) {
                if (modelName.equals(model.getModelName())) {
                    return model;
                }
            }
        }
        return null;
    }

    public String getModelId(String modelName) {
        for (Model model : models) {
            if (model.getModelName().toUpperCase().equals(modelName.toUpperCase())) {
                return model.getModelId();
            }
        }
        return null;
    }
}
