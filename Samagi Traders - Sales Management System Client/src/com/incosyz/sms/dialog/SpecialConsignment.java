/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.dialog;

import com.incosyz.sms.clientcontroller.Generator;
import com.incosyz.sms.clientcontroller.PriceAnnouncementControllerClient;
import com.incosyz.sms.mixmodel.BikeSpecialDealerModel;
import com.incosyz.sms.model.BikeModel;
import com.incosyz.sms.model.PriceAnnouncementModel;
import com.incosyz.sms.model.SpecialDealerModel;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Date : Oct 27, 2015 Time : 7:35:54 PM
 *
 * @copyright INCOSYZ
 * @author Stelan
 */
public class SpecialConsignment extends javax.swing.JDialog {

    /**
     * Creates new form SpecialConsignment
     */
    public SpecialConsignment(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        try {
            specialDealerTableModel = (DefaultTableModel) priceAnnouncementTable.getModel();

            priceAnnouncementModels = PriceAnnouncementControllerClient.getPriceAnnouncement();
            for (PriceAnnouncementModel priceAnnouncementModel : priceAnnouncementModels) {
                addAnnoucementModel(priceAnnouncementModel);
            }

            PriceAnnouncementModel selectedPriceAnnoucement = getSelectedPriceAnnoucement();
            annoucementSelectedId = selectedPriceAnnoucement.getPriceAnnouncementId();

        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SpecialConsignment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        priceAnnouncementTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        modelNameCombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        priceAnnouncementCombo = new javax.swing.JComboBox();
        capacityText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        optionText = new javax.swing.JTextField();
        inclusivePriceText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        specialPrice = new javax.swing.JTextField();
        dealerMarginText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteRow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - Price Announcement For Special Dealers");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 10, 550, 40);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 40, 230, 30);

        priceAnnouncementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model Name", "Capacity", "Selling Price", "Special Price", "Dealer Margin"
            }
        ));
        priceAnnouncementTable.setRowHeight(25);
        jScrollPane1.setViewportView(priceAnnouncementTable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(260, 150, 670, 440);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Model Name :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(30, 90, 200, 30);

        modelNameCombo.setEditable(true);
        modelNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameComboActionPerformed(evt);
            }
        });
        modelNameCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelNameComboKeyReleased(evt);
            }
        });
        jPanel1.add(modelNameCombo);
        modelNameCombo.setBounds(30, 120, 210, 30);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Price Announcement Date :");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(730, 10, 200, 30);

        priceAnnouncementCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceAnnouncementCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priceAnnouncementComboItemStateChanged(evt);
            }
        });
        priceAnnouncementCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceAnnouncementComboActionPerformed(evt);
            }
        });
        jPanel1.add(priceAnnouncementCombo);
        priceAnnouncementCombo.setBounds(730, 40, 200, 30);

        capacityText.setEditable(false);
        jPanel1.add(capacityText);
        capacityText.setBounds(30, 190, 210, 30);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Capacity :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(30, 160, 200, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Options :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(30, 230, 200, 30);

        optionText.setEditable(false);
        jPanel1.add(optionText);
        optionText.setBounds(30, 260, 210, 30);

        inclusivePriceText.setEditable(false);
        jPanel1.add(inclusivePriceText);
        inclusivePriceText.setBounds(30, 330, 210, 30);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Selling Price :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(30, 300, 200, 30);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Special Price :");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(30, 370, 200, 30);

        specialPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                specialPriceKeyReleased(evt);
            }
        });
        jPanel1.add(specialPrice);
        specialPrice.setBounds(30, 400, 210, 30);
        jPanel1.add(dealerMarginText);
        dealerMarginText.setBounds(30, 470, 210, 30);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Dealer Margin :");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(30, 440, 200, 30);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/addNew.jpg"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        addButton.setBounds(130, 540, 110, 50);

        deleteRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/deleteRow.jpg"))); // NOI18N
        deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowActionPerformed(evt);
            }
        });
        jPanel1.add(deleteRow);
        deleteRow.setBounds(260, 90, 110, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 954, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modelNameComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelNameComboKeyReleased

    }//GEN-LAST:event_modelNameComboKeyReleased

    private void priceAnnouncementComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priceAnnouncementComboItemStateChanged

    }//GEN-LAST:event_priceAnnouncementComboItemStateChanged

    private void priceAnnouncementComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceAnnouncementComboActionPerformed
        PriceAnnouncementModel selectedPriceAnnoucement = getSelectedPriceAnnoucement();
        if (selectedPriceAnnoucement != null) {
            annoucementSelectedId = selectedPriceAnnoucement.getPriceAnnouncementId();
            try {
                modelNameCombo.removeAllItems();
                allBikeModels = PriceAnnouncementControllerClient.getAllBikeModel(annoucementSelectedId);
                for (BikeModel allBikeModel : allBikeModels) {
                    addBikeModelCombo(allBikeModel);
                }

                specialDealerTableModel.setRowCount(0);
                allSpecialDealerModel = PriceAnnouncementControllerClient.getAllSpecialDealerModel(annoucementSelectedId);
                for (BikeSpecialDealerModel bikeSpecialDealerModel : allSpecialDealerModel) {
                    addDealerToModel(bikeSpecialDealerModel);
                }
            } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(SpecialConsignment.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_priceAnnouncementComboActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String modelName = (String) modelNameCombo.getSelectedItem();

        String specialDealerId = "D001";
        String modelId = selectedBikeModel.getBikeModelId();
        String price = specialPrice.getText();
        String dealerPrice = dealerMarginText.getText();

        boolean canAdd = true;
        if (price.equals("") || dealerPrice.equals("")) {
            JOptionPane.showMessageDialog(this, "Price & Dealer price is required !");
            canAdd = false;
        }

        if (canAdd) {

            if (modelNameCombo.getSelectedItem() != null) {

                if (!isExistsPriceannouncement(modelName)) {

                    try {
                        specialDealerId = Generator.generateId("ConsignmentDealer", "specialDealerId", "D", 3);

                        SpecialDealerModel specialDealerModel = new SpecialDealerModel()
                                .setSpecialDealerId(specialDealerId)
                                .setModelId(modelId)
                                .setDealerMargine(dealerPrice)
                                .setSpecialPrice(price);
                        boolean addSpecialDealerModel = PriceAnnouncementControllerClient.addSpecialDealerModel(specialDealerModel);
                        if (addSpecialDealerModel) {

                            reset();
                            capacityText.setText("");
                            optionText.setText("");
                            inclusivePriceText.setText("");
                            specialPrice.setText("");
                            dealerMarginText.setText("");

                            JOptionPane.showMessageDialog(this, "Special Dealer Prices Added Successfully !");
                        }
                    } catch (RemoteException | ClassNotFoundException | SQLException | NotBoundException | MalformedURLException ex) {
                        Logger.getLogger(SpecialConsignment.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Price announcement is already added !");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Model name is empty !");
            }

        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void modelNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameComboActionPerformed
        getSelectedBikeModel();
        if (selectedBikeModel != null) {
            capacityText.setText(selectedBikeModel.getCapacity());
            optionText.setText(selectedBikeModel.getBikeOption());
            inclusivePriceText.setText(selectedBikeModel.getNetAmount());
            specialPrice.setText(selectedBikeModel.getNetAmount());
            dealerMarginText.setText(selectedBikeModel.getCommision());
        }
    }//GEN-LAST:event_modelNameComboActionPerformed

    private void specialPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_specialPriceKeyReleased

    }//GEN-LAST:event_specialPriceKeyReleased

    private void deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowActionPerformed
        PriceAnnouncementModel selectedPriceAnnoucement = getSelectedPriceAnnoucement();
        String modelName = (String) priceAnnouncementTable.getValueAt(priceAnnouncementTable.getSelectedRow(), 0);

        String specialDealerId = "";
        for (int i = 0; i < allSpecialDealerModel.size(); i++) {
            if (allSpecialDealerModel.get(i).getModelName().equals(modelName)) {
                specialDealerId = allSpecialDealerModel.get(i).getSpecialDealerId();
                break;
            }
        }
        try {
            boolean deleteHTC = PriceAnnouncementControllerClient.deleteHTC(specialDealerId);
            if (deleteHTC) {
                reset();
                JOptionPane.showMessageDialog(this, "Price announcement deleted successfully !");
            }
        } catch (RemoteException | ClassNotFoundException | SQLException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(SpecialConsignment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteRowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpecialConsignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpecialConsignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpecialConsignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpecialConsignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SpecialConsignment dialog = new SpecialConsignment(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField capacityText;
    private javax.swing.JTextField dealerMarginText;
    private javax.swing.JButton deleteRow;
    private javax.swing.JTextField inclusivePriceText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox modelNameCombo;
    private javax.swing.JTextField optionText;
    private javax.swing.JComboBox priceAnnouncementCombo;
    private javax.swing.JTable priceAnnouncementTable;
    private javax.swing.JTextField specialPrice;
    // End of variables declaration//GEN-END:variables

    private ArrayList<PriceAnnouncementModel> priceAnnouncementModels;
    private String annoucementSelectedId;
    private ArrayList<BikeModel> allBikeModels;
    private BikeModel selectedBikeModel;
    private DefaultTableModel specialDealerTableModel;
    private ArrayList<BikeSpecialDealerModel> allSpecialDealerModel;

    public void reset() throws RemoteException, ClassNotFoundException, SQLException, NotBoundException, MalformedURLException {
        specialDealerTableModel.setRowCount(0);
        allSpecialDealerModel = PriceAnnouncementControllerClient.getAllSpecialDealerModel(annoucementSelectedId);
        for (BikeSpecialDealerModel bikeSpecialDealerModel : allSpecialDealerModel) {
            addDealerToModel(bikeSpecialDealerModel);
        }
    }

    public void addAnnoucementModel(PriceAnnouncementModel priceAnnouncementModel) {
        priceAnnouncementCombo.addItem(priceAnnouncementModel.getPriceAnnouncementDate());
    }

    public PriceAnnouncementModel getSelectedPriceAnnoucement() {
        String priceAnnoucementDate = (String) priceAnnouncementCombo.getSelectedItem();
        for (int i = 0; i < priceAnnouncementModels.size(); i++) {
            PriceAnnouncementModel priceAnnouncementModel = priceAnnouncementModels.get(i);
            if (priceAnnouncementModel.getPriceAnnouncementDate().equals(priceAnnoucementDate)) {
                return priceAnnouncementModel;
            }
        }
        return null;
    }

    public void addBikeModelCombo(BikeModel bikeModel) {
        modelNameCombo.addItem(bikeModel.getModelName().toUpperCase());
    }

    public BikeModel getSelectedBikeModel() {
        String modelName = (String) modelNameCombo.getSelectedItem();
        for (int i = 0; i < allBikeModels.size(); i++) {
            String bikeModel = allBikeModels.get(i).getModelName().toUpperCase();
            if (bikeModel.equals(modelName)) {
                selectedBikeModel = allBikeModels.get(i);
                break;
            }
        }
        return selectedBikeModel;
    }

    public BikeModel getSelectedBikeModel(String modelName) {
        for (int i = 0; i < allBikeModels.size(); i++) {
            String bikeModel = allBikeModels.get(i).getModelName();
            if (bikeModel.equals(modelName)) {
                selectedBikeModel = allBikeModels.get(i);
                break;
            }
        }
        return selectedBikeModel;
    }

    public void addSpecialDealerToModel(SpecialDealerModel specialDealerModel) {

        Object[] row = {modelNameCombo.getSelectedItem(),
            capacityText.getText(),
            inclusivePriceText.getText(),
            specialDealerModel.getSpecialPrice(),
            specialDealerModel.getDealerMargine()};
        specialDealerTableModel.addRow(row);
    }

    public void addDealerToModel(BikeSpecialDealerModel bikeSpecialDealerModel) {
        Object[] row = {bikeSpecialDealerModel.getModelName(),
            bikeSpecialDealerModel.getCapacity(),
            bikeSpecialDealerModel.getNetAmount(),
            bikeSpecialDealerModel.getSpecialPrice(),
            bikeSpecialDealerModel.getDealerMargine()};
        specialDealerTableModel.addRow(row);
    }

    public void setPriceAnnoucementDate(String date) {
        priceAnnouncementCombo.setSelectedItem(date);
    }

    public boolean isExistsPriceannouncement(String text) {
        for (int i = 0; i < priceAnnouncementTable.getRowCount(); i++) {
            String modelName = (String) priceAnnouncementTable.getValueAt(i, 0);
            if (modelName.equals(text)) {
                return true;
            }
        }
        return false;
    }
}
