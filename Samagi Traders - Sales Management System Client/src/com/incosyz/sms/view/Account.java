/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.view;

import com.incosyz.sms.clientcontroller.OrderControllerClient;
import com.incosyz.sms.config.Setting;
import com.incosyz.sms.dialog.AddAcount;
import com.incosyz.sms.mixmodel.GETOrderModel;
import com.incosyz.sms.model.AcountModel;
import com.incosyz.sms.model.CheckModel;
import com.incosyz.sms.other.CurrancyFormat;
import com.incosyz.sms.other.Requirment;
import com.incosyz.sms.other.TableFormat;
import static com.incosyz.sms.view.Home.img;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Date : Nov 19, 2015 Time : 7:49:16 PM
 *
 * @copyright INCOSYZ
 * @author Stelan
 */
public class Account extends javax.swing.JFrame {

    private DefaultTableModel acountTableModel;

    /**
     * Creates new form Account
     */
    public Account() {
        initComponents();
        setLocationRelativeTo(null);
        setIconImage(img);
        acountTableModel = (DefaultTableModel) acountTable.getModel();
        try {
            getDetail();
        } catch (NotBoundException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        acountTable = new javax.swing.JTable();
        newPriceAnnouncement2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        profitLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        incomeLabel = new javax.swing.JLabel();
        expendLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        fromDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        toDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        configCombo = new javax.swing.JComboBox();
        newPriceAnnouncement10 = new javax.swing.JButton();
        newPriceAnnouncement3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Samagi Traders | Sales Management System | View Account Summery");
        setMinimumSize(new java.awt.Dimension(924, 544));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - Sale Management");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");

        acountTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        acountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Description", "Income", "Expenditure", "User info"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        acountTable.setGridColor(new java.awt.Color(204, 204, 204));
        acountTable.setRowHeight(25);
        acountTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        acountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acountTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                acountTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                acountTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(acountTable);
        if (acountTable.getColumnModel().getColumnCount() > 0) {
            acountTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            acountTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        }

        newPriceAnnouncement2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/newAmountButton.jpg"))); // NOI18N
        newPriceAnnouncement2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement2ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Profit :");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(450, 0, 150, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("Total Income :");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(0, 0, 150, 30);

        profitLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        profitLabel.setForeground(new java.awt.Color(102, 102, 102));
        profitLabel.setText("Rs 0.00");
        jPanel2.add(profitLabel);
        profitLabel.setBounds(450, 30, 190, 40);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Total Expenditure :");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(220, 0, 150, 30);

        incomeLabel.setBackground(new java.awt.Color(0, 204, 102));
        incomeLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        incomeLabel.setForeground(new java.awt.Color(0, 153, 102));
        incomeLabel.setText("Rs 0.00");
        jPanel2.add(incomeLabel);
        incomeLabel.setBounds(0, 30, 190, 40);

        expendLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        expendLabel.setForeground(new java.awt.Color(204, 51, 0));
        expendLabel.setText("Rs 0.00");
        jPanel2.add(expendLabel);
        expendLabel.setBounds(220, 30, 190, 40);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(null);

        fromDatePicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromDatePickerMouseClicked(evt);
            }
        });
        fromDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromDatePickerActionPerformed(evt);
            }
        });
        jPanel3.add(fromDatePicker);
        fromDatePicker.setBounds(10, 70, 190, 30);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("From Date :");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(10, 50, 120, 20);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("To Date :");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(10, 120, 120, 20);

        toDatePicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toDatePickerMouseClicked(evt);
            }
        });
        toDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDatePickerActionPerformed(evt);
            }
        });
        jPanel3.add(toDatePicker);
        toDatePicker.setBounds(10, 140, 190, 30);

        jPanel4.setBackground(new java.awt.Color(245, 245, 245));
        jPanel4.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("View Config");
        jPanel4.add(jLabel5);
        jLabel5.setBounds(10, 0, 190, 30);

        jPanel3.add(jPanel4);
        jPanel4.setBounds(0, 190, 220, 30);

        jPanel5.setBackground(new java.awt.Color(245, 245, 245));
        jPanel5.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Search By Date");
        jPanel5.add(jLabel6);
        jLabel6.setBounds(10, 0, 190, 30);

        jPanel3.add(jPanel5);
        jPanel5.setBounds(0, 0, 220, 30);

        configCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "View All Amount", "View Orders Amount", "View Other Amount", "View Cheque Amount" }));
        configCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configComboActionPerformed(evt);
            }
        });
        jPanel3.add(configCombo);
        configCombo.setBounds(10, 240, 190, 30);

        newPriceAnnouncement10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/refresh.jpg"))); // NOI18N
        newPriceAnnouncement10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement10ActionPerformed(evt);
            }
        });

        newPriceAnnouncement3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/deleteRow.jpg"))); // NOI18N
        newPriceAnnouncement3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acountTableMouseClicked


    }//GEN-LAST:event_acountTableMouseClicked

    private void acountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acountTableMousePressed

    }//GEN-LAST:event_acountTableMousePressed

    private void acountTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acountTableMouseReleased

    }//GEN-LAST:event_acountTableMouseReleased

    private void newPriceAnnouncement2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement2ActionPerformed
        new AddAcount(this, true).setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement2ActionPerformed

    private void fromDatePickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromDatePickerMouseClicked

    }//GEN-LAST:event_fromDatePickerMouseClicked

    private void toDatePickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toDatePickerMouseClicked

    }//GEN-LAST:event_toDatePickerMouseClicked

    private void fromDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromDatePickerActionPerformed
        try {
            getDetail();
        } catch (NotBoundException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fromDatePickerActionPerformed

    private void toDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDatePickerActionPerformed
        try {
            getDetail();
        } catch (NotBoundException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_toDatePickerActionPerformed

    private void configComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configComboActionPerformed
        try {
            getDetail();
        } catch (NotBoundException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_configComboActionPerformed

    private void newPriceAnnouncement10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement10ActionPerformed
        try {
            getDetail();
        } catch (NotBoundException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newPriceAnnouncement10ActionPerformed

    private void newPriceAnnouncement3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement3ActionPerformed
        if (acountTable.getSelectedRow() > -1) {
            AcountModel selectedRow = getSelectedRow();
            if (selectedRow != null) {
                String id = selectedRow.getAcountId();
                if (id != null) {
                    try {
                        boolean deleteOrder = OrderControllerClient.deleteOrder(selectedRow);
                        if (deleteOrder) {
                            acountTableModel.removeRow(acountTable.getSelectedRow() );
                            JOptionPane.showMessageDialog(this, "Row deleted successfully !");
                        }
                    } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(Account.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "You can't delete selected detail !");
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Select row to delete !");
        }

    }//GEN-LAST:event_newPriceAnnouncement3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Account.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Account().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable acountTable;
    private javax.swing.JComboBox configCombo;
    private javax.swing.JLabel expendLabel;
    private org.jdesktop.swingx.JXDatePicker fromDatePicker;
    private javax.swing.JLabel incomeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newPriceAnnouncement10;
    private javax.swing.JButton newPriceAnnouncement2;
    private javax.swing.JButton newPriceAnnouncement3;
    private javax.swing.JLabel profitLabel;
    private org.jdesktop.swingx.JXDatePicker toDatePicker;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Integer> income;
    private ArrayList<Integer> expend;

    private double totalIncome;
    private double totalExpends;
    private double profit;

    private ArrayList<AcountModel> acountModels;

    public void getDetail() throws NotBoundException, MalformedURLException, RemoteException, ClassNotFoundException, SQLException, IOException {
        income = new ArrayList<>();
        expend = new ArrayList<>();
        acountTableModel.setRowCount(0);

        totalIncome = 0;
        totalExpends = 0;
        profit = 0;

        acountModels = new ArrayList<>();

        if (configCombo.getSelectedItem().equals("View Orders Amount")) {
            getOrders();
        } else if (configCombo.getSelectedItem().equals("View Other Amount")) {
            getAccount();
        } else if (configCombo.getSelectedItem().equals("View Cheque Amount")) {
            getCheque();
        } else {
            getOrders();
            getAccount();
            getCheque();
        }

        changeIncomeColour();
        changeExpendColour();

        incomeLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(totalIncome));
        expendLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(totalExpends));
        profitLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(profit));
    }

    public void changeIncomeColour() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(income);
        Setting s = new Setting();
        tableFormat.setCellBackground(153, 255, 153);
        tableFormat.setCellForeground(0, 0, 0);
        acountTable.getColumnModel().getColumn(2).setCellRenderer(tableFormat);
    }

    public void changeExpendColour() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(expend);
        Setting s = new Setting();
        tableFormat.setCellBackground(255, 204, 153);
        tableFormat.setCellForeground(0, 0, 0);
        acountTable.getColumnModel().getColumn(3).setCellRenderer(tableFormat);
    }

    public void getCheque() throws NotBoundException, MalformedURLException, RemoteException, ClassNotFoundException, SQLException, IOException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String fromDate = dateFormat.format(fromDatePicker.getDate());
        String toDate = dateFormat.format(toDatePicker.getDate());
        ArrayList<CheckModel> cheque = OrderControllerClient.getCheque(fromDate, toDate);

        double saleCheque = 0;
        double issuedCheque = 0;
        double receivedCheque = 0;

        for (CheckModel checkModel : cheque) {

            if (checkModel.getIsIssued() != null) {

                if (checkModel.getPaymentId() != null) {
                    saleCheque += Double.parseDouble(checkModel.getAmount());
                } else if (checkModel.getIsIssued().equals("1")) {
                    issuedCheque += Double.parseDouble(checkModel.getAmount());
                } else {
                    receivedCheque += Double.parseDouble(checkModel.getAmount());
                }

            }
        }

        AcountModel saleChaque = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("Sales Cheque Amounts - From Bike Sale ( Customer )")
                .setExpenditure(null)
                .setIncome(String.valueOf(saleCheque));
        addRow(saleChaque);

        AcountModel issued = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("Issued Cheque Amount")
                .setExpenditure(String.valueOf(issuedCheque))
                .setIncome(null);
        addRow(issued);

        AcountModel chequeReceived = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("Received Cheque Amount")
                .setExpenditure(null)
                .setIncome(String.valueOf(receivedCheque));
        addRow(chequeReceived);

    }

    public void getAccount() throws NotBoundException, MalformedURLException, RemoteException, ClassNotFoundException, SQLException, IOException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String fromDate = dateFormat.format(fromDatePicker.getDate());
        String toDate = dateFormat.format(toDatePicker.getDate());
        ArrayList<AcountModel> account = OrderControllerClient.getAccount(fromDate, toDate);

        for (AcountModel acountModel : account) {
            addRow(acountModel);
        }
    }

    public void getOrders() throws NotBoundException, MalformedURLException, RemoteException, ClassNotFoundException, SQLException, IOException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String fromDate = dateFormat.format(fromDatePicker.getDate());
        String toDate = dateFormat.format(toDatePicker.getDate());
        ArrayList<GETOrderModel> gETOrderModels = OrderControllerClient.getOrders(fromDate, toDate);

        double cashAmount = 0;
        double chequeAmount = 0;
        double leasingAmount = 0;
        double tvsPayment = 0;
        for (GETOrderModel gETOrderModel : gETOrderModels) {
            Requirment r = new Requirment(gETOrderModel.getCashModels(), gETOrderModel.getCheckModels(), gETOrderModel.getLeasingModel());
            cashAmount += r.getCashAmount();
            chequeAmount += r.getChequeAmount();
            leasingAmount += r.getLeasing();

            String bikeAmount = gETOrderModel.getPaymentModel().getBikeAmount();
            String commision = gETOrderModel.getPaymentModel().getCommision();
            String otherPayment = gETOrderModel.getPaymentModel().getOtherPaymentAmount();

            if (otherPayment == null) {
                tvsPayment += Double.parseDouble(bikeAmount) - Double.parseDouble(commision);
            } else {
                tvsPayment += Double.parseDouble(bikeAmount) - Double.parseDouble(commision) - Double.parseDouble(otherPayment);
            }
        }

        AcountModel acountModel = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("Sales Cash Amounts - From Bike Sale ( Customer )")
                .setExpenditure(null)
                .setIncome(String.valueOf(cashAmount));
        addRow(acountModel);

        AcountModel leasingAcount = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("Sales Leasing Amounts - From Bike Sale ( Customer )")
                .setExpenditure(null)
                .setIncome(String.valueOf(leasingAmount));
        addRow(leasingAcount);

        AcountModel tvs = new AcountModel()
                .setDate(fromDate + " To " + toDate)
                .setDescription("TVS Payment Amount")
                .setExpenditure(String.valueOf(tvsPayment))
                .setIncome(null);
        addRow(tvs);
    }

    public void addRow(AcountModel acountModel) {
        acountModels.add(acountModel);
        String income = acountModel.getIncome();
        if (income == null) {
            income = "0.00";
        } else {
            income = CurrancyFormat.getCurrancyFormat(income);
            totalIncome += Double.parseDouble(acountModel.getIncome());
        }

        String expend = acountModel.getExpenditure();
        if (expend == null) {
            expend = "0.00";
        } else {
            expend = CurrancyFormat.getCurrancyFormat(expend);
            totalExpends += Double.parseDouble(acountModel.getExpenditure());
        }
        Object[] row = {acountModel.getDate(), acountModel.getDescription(), income, expend, ""};
        acountTableModel.addRow(row);

        if (!income.equals("0.00")) {
            this.income.add(acountTable.getRowCount() - 1);
        }

        if (!expend.equals("0.00")) {
            this.expend.add(acountTable.getRowCount() - 1);
        }

        profit = totalIncome - totalExpends;
    }

    public AcountModel getSelectedRow() {
        return acountModels.get(acountTable.getSelectedRow());
    }
}
