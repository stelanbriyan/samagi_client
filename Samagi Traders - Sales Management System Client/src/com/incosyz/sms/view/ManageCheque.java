/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.view;

import com.incosyz.sms.clientcontroller.ChequeControllerClient;
import com.incosyz.sms.clientcontroller.FileControllerClient;
import com.incosyz.sms.config.Setting;
import com.incosyz.sms.dialog.AddNewCheque;
import com.incosyz.sms.dialog.SettlePayment;
import com.incosyz.sms.dialog.UpdateChequeDetail;
import com.incosyz.sms.dialog.MailSending;
import com.incosyz.sms.model.CheckModel;
import com.incosyz.sms.other.CurrancyFormat;
import com.incosyz.sms.other.GenerateHTML;
import com.incosyz.sms.other.Internet;
import com.incosyz.sms.other.MailSender;
import com.incosyz.sms.other.SearchChequeTable;
import com.incosyz.sms.other.TableFormat;
import com.incosyz.sms.pdfcontroller.ChequePDF;
import com.incosyz.sms.pdfcontroller.OrderPDF;
import static com.incosyz.sms.view.Home.img;
import com.itextpdf.text.DocumentException;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.BodyPart;
import javax.mail.MessagingException;
import javax.mail.internet.MimeBodyPart;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 * Date : Nov 11, 2015 Time : 10:35:43 PM
 *
 * @copyright INCOSYZ
 * @author Stelan
 */
public class ManageCheque extends javax.swing.JFrame {

    /**
     * Creates new form ManageCheque
     */
    public ManageCheque() {
        initComponents();
        setLocationRelativeTo(null);
        constructor();
    }

    public void constructor() {
        setIconImage(img);
        try {
            chequeTableModel = (DefaultTableModel) chequeTable.getModel();
            getCheque();
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ManageCheque(String paymentId) {
        initComponents();
        setLocationRelativeTo(null);
        try {
            chequeTableModel = (DefaultTableModel) chequeTable.getModel();
            getCheque(paymentId);
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private SettlePayment payment;

    public ManageCheque(CheckModel checkModel) {
        initComponents();
        setLocationRelativeTo(null);

        ArrayList<CheckModel> checkModels = new ArrayList<>();
        if (checkModel != null) {
            checkModels.add(checkModel);
        }
        chequeTableModel = (DefaultTableModel) chequeTable.getModel();
        setCheque(checkModels);

    }

    public void setPaymentFrame(SettlePayment payment) {
        this.payment = payment;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stateChangeMenu = new javax.swing.JPopupMenu();
        chequeChange = new javax.swing.JMenuItem();
        chequeReturn = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        removeState = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Edit = new javax.swing.JMenuItem();
        viewCheque = new javax.swing.JMenuItem();
        delete = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        print = new javax.swing.JMenuItem();
        mail = new javax.swing.JMenuItem();
        export = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chequeTable = new javax.swing.JTable();
        addNewButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        issuedChequeAmountLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        viewCombo = new javax.swing.JComboBox();
        newPriceAnnouncement11 = new javax.swing.JButton();
        newPriceAnnouncement10 = new javax.swing.JButton();
        mailSendButton = new javax.swing.JButton();
        pdfButton = new javax.swing.JButton();
        newPriceAnnouncement6 = new javax.swing.JButton();
        newPriceAnnouncement5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        searchByCombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        newPriceAnnouncement12 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        receivedChequeAmountLabel = new javax.swing.JLabel();
        newPriceAnnouncement9 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        count = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        stateChangeMenu.setBackground(new java.awt.Color(255, 255, 255));
        stateChangeMenu.setLabel("Cheque Returned");
        stateChangeMenu.setPreferredSize(new java.awt.Dimension(200, 350));

        chequeChange.setBackground(new java.awt.Color(255, 255, 255));
        chequeChange.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        chequeChange.setText("Money Got");
        chequeChange.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chequeChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeChangeActionPerformed(evt);
            }
        });
        stateChangeMenu.add(chequeChange);

        chequeReturn.setBackground(new java.awt.Color(255, 255, 255));
        chequeReturn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        chequeReturn.setText("Cheque Return");
        chequeReturn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chequeReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeReturnActionPerformed(evt);
            }
        });
        stateChangeMenu.add(chequeReturn);
        stateChangeMenu.add(jSeparator1);

        removeState.setBackground(new java.awt.Color(255, 255, 255));
        removeState.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        removeState.setText("Remove State");
        removeState.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        removeState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStateActionPerformed(evt);
            }
        });
        stateChangeMenu.add(removeState);
        stateChangeMenu.add(jSeparator2);

        Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/edit.png"))); // NOI18N
        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        stateChangeMenu.add(Edit);

        viewCheque.setText("View Cheque");
        stateChangeMenu.add(viewCheque);

        delete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/deleteMini.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        stateChangeMenu.add(delete);
        stateChangeMenu.add(jSeparator3);

        print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/printMINI.png"))); // NOI18N
        print.setText("Print");
        stateChangeMenu.add(print);

        mail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/mainMini.png"))); // NOI18N
        mail.setText("Send To Mail");
        mail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailActionPerformed(evt);
            }
        });
        stateChangeMenu.add(mail);

        export.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/miniPDF.png"))); // NOI18N
        export.setText("Export To PDF");
        stateChangeMenu.add(export);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Samagi Traders | Sales Management System | Manage Cheque Information");
        setMinimumSize(new java.awt.Dimension(984, 380));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - Manage Cheque Detail");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");

        chequeTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chequeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cheque No", "Bank Name", "Pay", "Amount", "Date", "Type", "Cheque State", "Remark"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        chequeTable.setGridColor(new java.awt.Color(204, 204, 204));
        chequeTable.setRowHeight(25);
        chequeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chequeTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chequeTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(chequeTable);
        if (chequeTable.getColumnModel().getColumnCount() > 0) {
            chequeTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        addNewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/addNewCheque.jpg"))); // NOI18N
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Issued Cheque Amount :");

        issuedChequeAmountLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        issuedChequeAmountLabel.setForeground(new java.awt.Color(102, 102, 102));
        issuedChequeAmountLabel.setText("Rs 000000.00");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        viewCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "View All Cheques", "Issued Cheques", "Received Cheques", "View Today Cheques", "View Sales Cheques" }));
        viewCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        newPriceAnnouncement11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/setting.jpg"))); // NOI18N
        newPriceAnnouncement11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement11ActionPerformed(evt);
            }
        });

        newPriceAnnouncement10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/refresh.jpg"))); // NOI18N
        newPriceAnnouncement10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement10ActionPerformed(evt);
            }
        });

        mailSendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/sendMail.jpg"))); // NOI18N
        mailSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailSendButtonActionPerformed(evt);
            }
        });

        pdfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/pdf.jpg"))); // NOI18N
        pdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfButtonActionPerformed(evt);
            }
        });

        newPriceAnnouncement6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/print.jpg"))); // NOI18N
        newPriceAnnouncement6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement6ActionPerformed(evt);
            }
        });

        newPriceAnnouncement5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/advanceSearch_1.jpg"))); // NOI18N
        newPriceAnnouncement5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement5ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Search :");

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        searchByCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchByCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cheque No", "Bank Name", "Issued By", "Date", "State", "Type", "Remark" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Search By :");

        newPriceAnnouncement12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/delete_1.jpg"))); // NOI18N
        newPriceAnnouncement12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement12ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Received Cheque Amount :");

        receivedChequeAmountLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        receivedChequeAmountLabel.setForeground(new java.awt.Color(102, 102, 102));
        receivedChequeAmountLabel.setText("Rs 000000.00");

        newPriceAnnouncement9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/editCheque.jpg"))); // NOI18N
        newPriceAnnouncement9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement9ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(null);

        count.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        count.setForeground(new java.awt.Color(153, 153, 153));
        count.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        count.setText("06");
        count.setToolTipText("");
        jPanel3.add(count);
        count.setBounds(6, 0, 90, 50);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/nmber.jpg"))); // NOI18N
        jPanel3.add(jLabel7);
        jLabel7.setBounds(10, 4, 90, 44);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(issuedChequeAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receivedChequeAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mailSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newPriceAnnouncement12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(receivedChequeAmountLabel))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(issuedChequeAmountLabel))))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chequeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chequeTableMouseClicked

    }//GEN-LAST:event_chequeTableMouseClicked

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        AddNewCheque addNewCheque = new AddNewCheque(this, true);
        addNewCheque.setParentFrame(this);
        addNewCheque.setVisible(true);
    }//GEN-LAST:event_addNewButtonActionPerformed

    private void newPriceAnnouncement11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement11ActionPerformed

    }//GEN-LAST:event_newPriceAnnouncement11ActionPerformed

    private void newPriceAnnouncement10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement10ActionPerformed
        try {
            getCheque();
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newPriceAnnouncement10ActionPerformed

    private void mailSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailSendButtonActionPerformed
        if (Internet.isInternetAvailable()) {

            final ChequePDF chequePdf = new ChequePDF();
            final MailSending s = new MailSending(this, false);

            new Thread() {

                @Override
                public void run() {
                    String selectedItem = (String) viewCombo.getSelectedItem();
                    String orderDescription = "";

                    if (selectedItem.equals("View All Cheques")) {
                        orderDescription = "All Cheque Report";
                    } else if (selectedItem.equals("Issued Cheques")) {
                        orderDescription = "Issued Cheques Report";
                    } else if (selectedItem.equals("Received Cheques")) {
                        orderDescription = "Received Cheques Report";
                    } else if (selectedItem.equals("View Today Cheques")) {
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        orderDescription = "Cheques That Today can be changes ( " + dateFormat.format(new Date()) + " )";
                    } else if (selectedItem.equals("View Sales Cheques")) {
                        orderDescription = "Cheques That Received from sales";
                    }

                    s.setVisible(true);
                    mailSendButton.setEnabled(false);
                    try {
                        chequePdf.sendPdf(checkModels, orderDescription);
                    } catch (DocumentException | MessagingException ex) {
                        Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    s.setVisible(false);
                    mailSendButton.setEnabled(true);
                }

            }.start();

        } else {
            JOptionPane.showMessageDialog(this, "Internet is not available !");
        }
    }//GEN-LAST:event_mailSendButtonActionPerformed

    private void pdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfButtonActionPerformed
        String selectedItem = (String) viewCombo.getSelectedItem();
        String orderDescription = "";

        if (selectedItem.equals("View All Cheques")) {
            orderDescription = "All Cheque Report";
        } else if (selectedItem.equals("Issued Cheques")) {
            orderDescription = "Issued Cheques Report";
        } else if (selectedItem.equals("Received Cheques")) {
            orderDescription = "Received Cheques Report";
        } else if (selectedItem.equals("View Today Cheques")) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            orderDescription = "Cheques That Today can be changes ( " + dateFormat.format(new Date()) + " )";
        } else if (selectedItem.equals("View Sales Cheques")) {
            orderDescription = "Cheques That Received from sales";
        }

        JFileChooser chooser = new JFileChooser();
        int showSaveDialog = chooser.showSaveDialog(this);
        if (showSaveDialog == JFileChooser.OPEN_DIALOG) {
            ChequePDF chequePdf = new ChequePDF();
            String filePath = chooser.getSelectedFile().getPath() + ".pdf";
            try {
                chequePdf.generateOrderPdf(cheque, filePath, orderDescription);
            } catch (FileNotFoundException | DocumentException ex) {
                Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_pdfButtonActionPerformed

    private void newPriceAnnouncement6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPriceAnnouncement6ActionPerformed

    private void newPriceAnnouncement5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPriceAnnouncement5ActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        SearchChequeTable chequeTable = new SearchChequeTable();
        if (searchByCombo.getSelectedItem().equals("Cheque No")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 0, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("Bank Name")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 1, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("Issued By")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 2, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("Date")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 3, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("State")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 4, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("Type")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 5, searchText.getText());
            setNewTableRows(filterTable);
        } else if (searchByCombo.getSelectedItem().equals("Remark")) {
            chequeTable = new SearchChequeTable();
            ArrayList<CheckModel> filterTable = chequeTable.filterTable(cheque, 6, searchText.getText());
            setNewTableRows(filterTable);
        }
    }//GEN-LAST:event_searchTextKeyReleased

    private void viewComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewComboActionPerformed
        if (viewCombo.getSelectedItem().equals("Issued Cheques")) {
            ArrayList<CheckModel> issuedCheque = getIssuedCheque();
            setNewTableRows(issuedCheque);
        } else if (viewCombo.getSelectedItem().equals("Received Cheques")) {
            ArrayList<CheckModel> issuedCheque = getRecievedCheque();
            setNewTableRows(issuedCheque);
        } else if (viewCombo.getSelectedItem().equals("View All Cheques")) {
            ArrayList<CheckModel> issuedCheque = cheque;
            setNewTableRows(issuedCheque);
        } else if (viewCombo.getSelectedItem().equals("View Today Cheques")) {
            ArrayList<CheckModel> todayCheque = getTodayCheque();
            setNewTableRows(todayCheque);
        } else if (viewCombo.getSelectedItem().equals("View Sales Cheques")) {
            ArrayList<CheckModel> todayCheque = getSalesCheque();
            setNewTableRows(todayCheque);
        }
    }//GEN-LAST:event_viewComboActionPerformed

    private void newPriceAnnouncement12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement12ActionPerformed
        if (chequeTable.getSelectedRow() != -1) {
            CheckModel selectedCheque = getSelectedCheque();
            String paymentId = selectedCheque.getPaymentId();
            if (paymentId != null) {
                JOptionPane.showMessageDialog(this, "Cannot delete this cheque. some order required this cheque to calculate amount !");
            } else {
                try {
                    boolean deleteCheque = ChequeControllerClient.deleteCheque(selectedCheque.getChequeId());
                    if (deleteCheque) {
                        chequeTableModel.removeRow(chequeTable.getSelectedRow());
                    } else {
                        JOptionPane.showMessageDialog(this, "Delete failed !");
                    }
                } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
                    Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select row to delete !");
        }
    }//GEN-LAST:event_newPriceAnnouncement12ActionPerformed

    private void newPriceAnnouncement9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement9ActionPerformed

        if (chequeTable.getSelectedRow() != -1) {
            CheckModel selectedCheque = getSelectedCheque();

            UpdateChequeDetail chequeDetail = new UpdateChequeDetail(this, true);
            chequeDetail.setParentFrame(this);
            chequeDetail.setChequeModel(selectedCheque);
            chequeDetail.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select row to update !");
        }

    }//GEN-LAST:event_newPriceAnnouncement9ActionPerformed

    private void chequeTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chequeTableMouseReleased
        if (SwingUtilities.isRightMouseButton(evt) == true) {
            int row = chequeTable.rowAtPoint(evt.getPoint());

            chequeTable.clearSelection();
            chequeTable.addRowSelectionInterval(row, row);
            //your popup menu goes here.
        }

        if (chequeTable.getSelectedRow() > -1) {
            if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                stateChangeMenu.show(chequeTable, evt.getX(), evt.getY());
            }
        }

    }//GEN-LAST:event_chequeTableMouseReleased

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed

        if (chequeTable.getSelectedRow() != -1) {
            CheckModel selectedCheque = getSelectedCheque();

            UpdateChequeDetail chequeDetail = new UpdateChequeDetail(this, true);
            chequeDetail.setParentFrame(this);
            chequeDetail.setChequeModel(selectedCheque);
            chequeDetail.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select row to update !");
        }
    }//GEN-LAST:event_EditActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (chequeTable.getSelectedRow() != -1) {
            CheckModel selectedCheque = getSelectedCheque();
            String paymentId = selectedCheque.getPaymentId();
            if (paymentId != null) {
                JOptionPane.showMessageDialog(this, "Cannot delete this cheque. some order required this cheque to calculate amount !");
            } else {
                try {
                    boolean deleteCheque = ChequeControllerClient.deleteCheque(selectedCheque.getChequeId());
                    if (deleteCheque) {
                        chequeTableModel.removeRow(chequeTable.getSelectedRow());
                    } else {
                        JOptionPane.showMessageDialog(this, "Delete failed !");
                    }
                } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
                    Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select row to delete !");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void mailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailActionPerformed
        boolean internetAvailable = Internet.isInternetAvailable();

        if (internetAvailable) {
            final CheckModel checkModel = getSelectedCheque();
            final String subject = "CHEQUE " + checkModel.getCheckNo();

            final MailSending s = new MailSending(this, false);
            new Thread() {

                @Override
                public void run() {
                    try {
                        s.setVisible(true);

                        MailSender mailSender = new MailSender();
                        mailSender.setAttachmentPath(null);

                        mailSender.setSubject(subject);

                        String fileName = "IMG" + checkModel.getChequeId() + ".cms";
                        byte[] file = FileControllerClient.getFile(fileName);
                        String image = "IMG" + checkModel.getChequeId() + ".jpg";
                        String filePath = "./src/com/incosyz/sms/temp/" + image;
                        if (file != null) {
                            OutputStream os = new FileOutputStream(filePath);
                            os.write(file);
                            os.flush();
                            os.close();

                            mailSender.setAttachmentPath(filePath);
                        }

                        MimeBodyPart body = (MimeBodyPart) mailSender.getBody();

                        ArrayList<CheckModel> checkModels = new ArrayList<>();
                        checkModels.add(checkModel);
                        body.setText(new GenerateHTML().getTableHTMLFormat(checkModels), "utf-8", "html");

                        mailSender.sendMail();

                        File f = new File(filePath);
                        if (f.isFile()) {
                            f.delete();
                        }

                        s.setVisible(false);

                    } catch (MessagingException | IOException ex) {
                        Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NotBoundException ex) {
                        Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }.start();

        } else {
            JOptionPane.showMessageDialog(this, "Internet is not available. sending failed !");
        }
    }//GEN-LAST:event_mailActionPerformed

    private void chequeChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeChangeActionPerformed
        try {
            CheckModel checkModel = getSelectedCheque();
            boolean changeState = ChequeControllerClient.changeState("Money Got", checkModel.getChequeId());

            if (changeState) {
                chequeTableModel.setValueAt("Money Got", chequeTable.getSelectedRow(), 6);
            }
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chequeChangeActionPerformed

    private void chequeReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeReturnActionPerformed
        try {
            CheckModel checkModel = getSelectedCheque();
            boolean changeState = ChequeControllerClient.changeState("Returned", checkModel.getChequeId());

            if (changeState) {
                chequeTableModel.setValueAt("Returned", chequeTable.getSelectedRow(), 6);
            }
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chequeReturnActionPerformed

    private void removeStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStateActionPerformed
        try {
            CheckModel checkModel = getSelectedCheque();
            boolean changeState = ChequeControllerClient.changeState("", checkModel.getChequeId());

            if (changeState) {
                chequeTableModel.setValueAt("", chequeTable.getSelectedRow(), 6);
            }
        } catch (NotBoundException | MalformedURLException | ClassNotFoundException | SQLException | RemoteException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removeStateActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (payment != null) {
            dispose();
            payment.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            UIManager.getLookAndFeelDefaults().put("PopupMenu.background", Color.WHITE);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageCheque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageCheque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageCheque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCheque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageCheque().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Edit;
    private javax.swing.JButton addNewButton;
    private javax.swing.JMenuItem chequeChange;
    private javax.swing.JMenuItem chequeReturn;
    private javax.swing.JTable chequeTable;
    private javax.swing.JLabel count;
    private javax.swing.JMenuItem delete;
    private javax.swing.JMenuItem export;
    private javax.swing.JLabel issuedChequeAmountLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem mail;
    private javax.swing.JButton mailSendButton;
    private javax.swing.JButton newPriceAnnouncement10;
    private javax.swing.JButton newPriceAnnouncement11;
    private javax.swing.JButton newPriceAnnouncement12;
    private javax.swing.JButton newPriceAnnouncement5;
    private javax.swing.JButton newPriceAnnouncement6;
    private javax.swing.JButton newPriceAnnouncement9;
    private javax.swing.JButton pdfButton;
    private javax.swing.JMenuItem print;
    private javax.swing.JLabel receivedChequeAmountLabel;
    private javax.swing.JMenuItem removeState;
    private javax.swing.JComboBox searchByCombo;
    private javax.swing.JTextField searchText;
    private javax.swing.JPopupMenu stateChangeMenu;
    private javax.swing.JMenuItem viewCheque;
    private javax.swing.JComboBox viewCombo;
    // End of variables declaration//GEN-END:variables
    private ArrayList<CheckModel> cheque;
    private ArrayList<CheckModel> checkModels;
    private DefaultTableModel chequeTableModel;

    private double issuedAmount;
    private double recievedAmount;

    private ArrayList<Integer> issuedCheque;
    private ArrayList<Integer> receivedCheque;
    private ArrayList<Integer> orderCheque;
    private ArrayList<Integer> canGetNotMoneyGotCheque;

    public void getCheque() throws NotBoundException, MalformedURLException, ClassNotFoundException, SQLException, RemoteException {
        cheque = ChequeControllerClient.getCheque();

        setNewTableRows(cheque);
    }

    public void setCheque(ArrayList<CheckModel> checkModels) {
        cheque = checkModels;
        setNewTableRows(cheque);
    }

    public void setNewTableRows(ArrayList<CheckModel> checkModels) {
        this.checkModels = checkModels;
        chequeTableModel.setRowCount(0);

        issuedCheque = new ArrayList<>();
        orderCheque = new ArrayList<>();
        receivedCheque = new ArrayList<>();
        canGetNotMoneyGotCheque = new ArrayList<>();

        issuedAmount = 0;
        recievedAmount = 0;
        for (CheckModel checkModel : checkModels) {
            addTableRow(checkModel);
        }
        issuedChequeAmountLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(issuedAmount));
        receivedChequeAmountLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(recievedAmount));
        try {
            changeIssuedChequeColour();
            orderChequeColour();
            changeCanGet();
        } catch (IOException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }

        count.setText(String.valueOf(chequeTable.getRowCount()));
    }

    public void addTableData(CheckModel checkModel) {
        if (checkModels == null) {
            checkModels = new ArrayList<>();
        }
        checkModels.add(checkModel);
//        cheque.add(checkModel);
        addTableRow(checkModel);
        issuedChequeAmountLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(issuedAmount));
        receivedChequeAmountLabel.setText("Rs " + CurrancyFormat.getCurrancyFormat(recievedAmount));
    }

    private void addTableRow(CheckModel checkModel) {
        String chequeNo = checkModel.getCheckNo();
        String bankName = checkModel.getBankName();
        String issuedBy = checkModel.getIssuedBy();
        String chequeState = checkModel.getStateName();
        String amount = checkModel.getAmount();
        String date = checkModel.getChequeDate();
        String type = checkModel.getType();
        String remark = checkModel.getNote();
        String isIssued = checkModel.getIsIssued();

        Object[] row = {chequeNo, bankName, issuedBy, CurrancyFormat.getCurrancyFormat(amount), date, type, chequeState, remark};
        chequeTableModel.addRow(row);

        if (isIssued.equals("1")) {
            issuedCheque.add(chequeTableModel.getRowCount() - 1);

            if (chequeState != null) {
                if (chequeState.equals("Returned")) {
                    issuedAmount += Double.parseDouble(amount);
                }
            }
        } else if (isIssued.equals("0")) {
            receivedCheque.add(chequeTableModel.getRowCount() - 1);

            if (chequeState != null) {
                if (chequeState.equals("Returned")) {
                    recievedAmount += Double.parseDouble(amount);
                }
            }
        }

        if (checkModel.getPaymentId() != null) {
            orderCheque.add(chequeTableModel.getRowCount() - 1);
        }

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date newDate = new Date();
            Date oldDate = dateFormat.parse(date);

            if (chequeState == null || chequeState.equals("")) {
                if (newDate.after(oldDate)) {
                    canGetNotMoneyGotCheque.add(chequeTableModel.getRowCount() - 1);
                }
            }

        } catch (ParseException ex) {
            Logger.getLogger(ManageCheque.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void changeIssuedChequeColour() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(issuedCheque);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("CHEQUENISUES_B_R")), Integer.parseInt(s.getProperty("CHEQUENISUES_B_G")), Integer.parseInt(s.getProperty("CHEQUENISUES_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("CHEQUENISUES_F_R")), Integer.parseInt(s.getProperty("CHEQUENISUES_F_G")), Integer.parseInt(s.getProperty("CHEQUENISUES_B_B")));
        chequeTable.getColumnModel().getColumn(2).setCellRenderer(tableFormat);
    }

    private void changeCanGet() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(canGetNotMoneyGotCheque);
        Setting s = new Setting();
        tableFormat.setCellBackground(255, 229, 204);
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("CHEQUENISUES_F_R")), Integer.parseInt(s.getProperty("CHEQUENISUES_F_G")), Integer.parseInt(s.getProperty("CHEQUENISUES_B_B")));
        chequeTable.getColumnModel().getColumn(4).setCellRenderer(tableFormat);
    }

    public void orderChequeColour() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(orderCheque);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("OCHEQUENISUES_B_R")), Integer.parseInt(s.getProperty("OCHEQUENISUES_B_G")), Integer.parseInt(s.getProperty("OCHEQUENISUES_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("OCHEQUENISUES_F_R")), Integer.parseInt(s.getProperty("OCHEQUENISUES_F_G")), Integer.parseInt(s.getProperty("OCHEQUENISUES_B_B")));
        chequeTable.getColumnModel().getColumn(0).setCellRenderer(tableFormat);
    }

    ArrayList<CheckModel> models = new ArrayList<>();

    public ArrayList<CheckModel> getIssuedCheque() {
        models = new ArrayList<>();
        for (CheckModel checkModel : cheque) {
            if (checkModel.getIsIssued().equals("1")) {
                models.add(checkModel);
            }
        }
        return models;
    }

    public ArrayList<CheckModel> getRecievedCheque() {
        models = new ArrayList<>();
        for (CheckModel checkModel : cheque) {
            if (checkModel.getIsIssued().equals("0")) {
                models.add(checkModel);
            }
        }
        return models;
    }

    public ArrayList<CheckModel> getTodayCheque() {
        models = new ArrayList<>();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date today = new Date();

        for (CheckModel checkModel : cheque) {
            if (checkModel.getChequeDate().equals(dateFormat.format(today))) {
                models.add(checkModel);
            }
        }
        return models;
    }

    public CheckModel getSelectedCheque() {
        String chequeNo = (String) chequeTable.getValueAt(chequeTable.getSelectedRow(), 0);
        for (CheckModel checkModel : checkModels) {
            if (checkModel.getCheckNo().equals(chequeNo)) {
                return checkModel;
            }
        }
        return null;
    }

    private ArrayList<CheckModel> getSalesCheque() {
        models = new ArrayList<>();
        for (CheckModel checkModel : cheque) {
            if (checkModel.getPaymentId() != null) {
                models.add(checkModel);
            }
        }
        return models;
    }

    private void getCheque(String paymentId) throws NotBoundException, MalformedURLException, ClassNotFoundException, SQLException, RemoteException {
        cheque = ChequeControllerClient.getCheque(paymentId);

        setNewTableRows(cheque);
    }
}
