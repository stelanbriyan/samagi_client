/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.view;

import com.incosyz.sms.clientcontroller.ComboSearch;
import com.incosyz.sms.clientcontroller.Generator;
import com.incosyz.sms.clientcontroller.PriceAnnouncementControllerClient;
import com.incosyz.sms.dialog.AddNewModel;
import com.incosyz.sms.dialog.AddNewOption;
import com.incosyz.sms.dialog.NewPriceAnnouncement;
import com.incosyz.sms.dialog.SpecialConsignment;
import com.incosyz.sms.dialog.DeletePriceAnnouncementId;
import com.incosyz.sms.model.BikeModel;
import com.incosyz.sms.model.Model;
import com.incosyz.sms.model.OrderModel;
import com.incosyz.sms.model.PriceAnnouncementModel;
import com.incosyz.sms.model.SpecialDealerModel;
import com.incosyz.sms.other.Validation;
import static com.incosyz.sms.view.Home.img;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Stelan
 */
public class ManagePriceAnnouncement extends javax.swing.JFrame {

    /**
     * Creates new form ManagePriceAnnouncement
     */
    public ManagePriceAnnouncement() {
        initComponents();
        setLocationRelativeTo(null);
        constructor();
    }

    public void constructor() {
        setIconImage(img);
        priceAnnouncementModels = new ArrayList<>();
        try {
            ArrayList<PriceAnnouncementModel> priceAnnouncement = PriceAnnouncementControllerClient.getPriceAnnouncement();
            for (PriceAnnouncementModel priceAnnouncementModel : priceAnnouncement) {
                addPriceAnnoucement(priceAnnouncementModel);
            }

            /**
             * Get selected Option List details
             */
            ArrayList<String> options = PriceAnnouncementControllerClient.getOption();
            for (String option : options) {
                addOption(option);
            }
            /**
             * Get selected Model Names details
             */
            models = new ArrayList<>();
            ArrayList<Model> allModelName = PriceAnnouncementControllerClient.getAllModelName();
            for (Model modelName : allModelName) {
                addModelName(modelName);
            }

            priceAnnouncementTableModel = (DefaultTableModel) priceAnnouncementTable.getModel();

//            ComboSearch comboSearch = new ComboSearch();
//            comboSearch.setSearchableCombo(modelNameCombo, true, "");
//
//            ComboSearch optionSearch = new ComboSearch();
//            optionSearch.setSearchableCombo(optionCombo, true, "OPTION NOT FOUND !");
            /**
             * Get selected price announcement details
             */
            PriceAnnouncementModel selectedPriceAnnoucement = getSelectedPriceAnnoucement();
            if (selectedPriceAnnoucement != null) {
                priceAnnoucementId = selectedPriceAnnoucement.getPriceAnnouncementId();
            }
            setBikeModel();
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (priceAnnouncementCombo.getItemCount() == 0) {
            NewPriceAnnouncement newPriceAnnouncement = new NewPriceAnnouncement(this, true);
            newPriceAnnouncement.setParentFrame(this);
            newPriceAnnouncement.setVisible(true);
        }
        
        ComboSearch comboSearch = new ComboSearch();
        comboSearch.setSearchableCombo(modelNameCombo, true, "Model name not found !");
        
        ComboSearch comboSearch1
                 = new ComboSearch();
        comboSearch1.setSearchableCombo(optionCombo, true, "Option name not found !");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newPriceAnnouncement = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        priceAnnouncementTable = new javax.swing.JTable();
        addNewOption = new javax.swing.JButton();
        newPriceAnnouncement2 = new javax.swing.JButton();
        newPriceAnnouncement3 = new javax.swing.JButton();
        deleteRow = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        modelNameCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        capacityText = new javax.swing.JTextField();
        jacketCheque = new javax.swing.JCheckBox();
        helmetCheque = new javax.swing.JCheckBox();
        commissionRetained = new javax.swing.JTextField();
        inclusivePrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        optionList = new javax.swing.JList();
        optionCombo = new javax.swing.JComboBox();
        option = new javax.swing.JLabel();
        addOption = new javax.swing.JButton();
        addOption1 = new javax.swing.JButton();
        priceAnnouncementCombo = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Samagi Traders | Sales Management System | Manage Price announcement");
        setMinimumSize(new java.awt.Dimension(953, 605));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - Manage Price Announcement");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");

        newPriceAnnouncement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/newPriceAnnouncementNew.jpg"))); // NOI18N
        newPriceAnnouncement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncementActionPerformed(evt);
            }
        });

        priceAnnouncementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model Name", "Capacity", "Options", "All Inclusive Price", "Commission Retained", "Net Remittance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        priceAnnouncementTable.setRowHeight(25);
        priceAnnouncementTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                priceAnnouncementTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(priceAnnouncementTable);

        addNewOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/manageOptionsNew.jpg"))); // NOI18N
        addNewOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewOptionActionPerformed(evt);
            }
        });

        newPriceAnnouncement2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/upaharaHolders.jpg"))); // NOI18N
        newPriceAnnouncement2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement2ActionPerformed(evt);
            }
        });

        newPriceAnnouncement3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/manageModels.jpg"))); // NOI18N
        newPriceAnnouncement3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement3ActionPerformed(evt);
            }
        });

        deleteRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/deleteRow.jpg"))); // NOI18N
        deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/addToList.jpg"))); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addButton);
        addButton.setBounds(130, 460, 110, 50);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("CC");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(210, 150, 30, 30);

        modelNameCombo.setEditable(true);
        modelNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameComboActionPerformed(evt);
            }
        });
        modelNameCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                modelNameComboKeyReleased(evt);
            }
        });
        jPanel2.add(modelNameCombo);
        modelNameCombo.setBounds(30, 90, 210, 30);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Capacity :");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(30, 130, 200, 20);

        capacityText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                capacityTextKeyReleased(evt);
            }
        });
        jPanel2.add(capacityText);
        capacityText.setBounds(30, 150, 170, 30);

        jacketCheque.setBackground(new java.awt.Color(255, 255, 255));
        jacketCheque.setSelected(true);
        jacketCheque.setText("Jacket");
        jPanel2.add(jacketCheque);
        jacketCheque.setBounds(30, 490, 90, 23);

        helmetCheque.setBackground(new java.awt.Color(255, 255, 255));
        helmetCheque.setSelected(true);
        helmetCheque.setText("  Helmet");
        jPanel2.add(helmetCheque);
        helmetCheque.setBounds(30, 460, 90, 23);

        commissionRetained.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commissionRetainedActionPerformed(evt);
            }
        });
        commissionRetained.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                commissionRetainedKeyReleased(evt);
            }
        });
        jPanel2.add(commissionRetained);
        commissionRetained.setBounds(30, 420, 210, 30);

        inclusivePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inclusivePriceActionPerformed(evt);
            }
        });
        inclusivePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inclusivePriceKeyReleased(evt);
            }
        });
        jPanel2.add(inclusivePrice);
        inclusivePrice.setBounds(30, 350, 210, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("All Inclusive Price :");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(30, 330, 200, 20);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Commission Retained :");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(30, 400, 200, 20);

        jScrollPane2.setViewportView(optionList);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(30, 260, 160, 50);

        optionCombo.setEditable(true);
        jPanel2.add(optionCombo);
        optionCombo.setBounds(30, 220, 160, 30);

        option.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        option.setText("Options :");
        jPanel2.add(option);
        option.setBounds(30, 200, 200, 20);

        addOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/add.jpg"))); // NOI18N
        addOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOptionActionPerformed(evt);
            }
        });
        jPanel2.add(addOption);
        addOption.setBounds(200, 220, 40, 30);

        addOption1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/delete.jpg"))); // NOI18N
        addOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOption1ActionPerformed(evt);
            }
        });
        jPanel2.add(addOption1);
        addOption1.setBounds(200, 260, 40, 30);

        priceAnnouncementCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceAnnouncementCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                priceAnnouncementComboItemStateChanged(evt);
            }
        });
        priceAnnouncementCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceAnnouncementComboActionPerformed(evt);
            }
        });
        jPanel2.add(priceAnnouncementCombo);
        priceAnnouncementCombo.setBounds(30, 30, 210, 30);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Price Announcement Date :");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(30, 0, 200, 30);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Model Name :");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(30, 70, 200, 20);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(newPriceAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(addNewOption, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(deleteRow, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newPriceAnnouncement, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNewOption, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newPriceAnnouncementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncementActionPerformed
        NewPriceAnnouncement newPriceAnnouncement = new NewPriceAnnouncement(this, true);
        newPriceAnnouncement.setParentFrame(this);
        newPriceAnnouncement.setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncementActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        String priceAnnouncementId = this.priceAnnoucementId;
        String modelName = (String) modelNameCombo.getSelectedItem();
        String capacity = capacityText.getText();
        String price = inclusivePrice.getText();
        String option = getOptionLine();
        String commission = commissionRetained.getText();
        String helmet = "0";
        String jacket = "0";
//       if (!isExists) {
        boolean canAdd = true;
        String bikeModelId = "";
        String modelId = "";
        if (modelNameCombo.getSelectedItem() != null) {
            try {
                modelId = getSelectedModel(modelName).getModelId();
            } catch (Exception e) {
                canAdd = false;
                JOptionPane.showMessageDialog(this, "Model name is incorrect. Cannot find model name that you entered !");
            }
        }
        if (price.trim().equals("")) {
            canAdd = false;
        }
        if (commission.trim().equals("")) {
            canAdd = false;
        }
        if (modelNameCombo.getItemCount() < 1) {
            canAdd = false;
        } else {
            if (modelNameCombo.getSelectedItem().toString().trim().equals("")) {
                canAdd = false;
            }
        }
        if (capacity.trim().equals("")) {
            canAdd = false;
        }
        if (canAdd) {

            if (helmetCheque.isSelected()) {
                helmet = "1";
            }
            if (jacketCheque.isSelected()) {
                jacket = "1";
            }
            BikeModel bikeModel = new BikeModel()
                    .setModelId(modelId)
                    .setPriceAnnouncementId(priceAnnouncementId)
                    .setBikeOption(option.toUpperCase())
                    .setCapacity(capacity)
                    .setCommision(commission)
                    .setNetAmount(price)
                    .setHelmet(helmet)
                    .setModelName(modelName.toUpperCase())
                    .setJacket(jacket);

            if (!isExistModel(modelName)) {
                try {
                    try {
                        bikeModelId = Generator.generateId("BikeModel", "bikeModelId", "B", 3);
                        bikeModel.setBikeModelId(bikeModelId);
                    } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    boolean addBikeModel = PriceAnnouncementControllerClient.addBikeModel(bikeModel);
                    if (addBikeModel) {
                        setBikeModelToTable(bikeModel);

                        capacityText.setText("");
                        optionList.setModel(new DefaultListModel());
                        inclusivePrice.setText("");
                        commissionRetained.setText("");

                        JOptionPane.showMessageDialog(this, "Bike Model added successfully !");
                        modelNameCombo.requestFocus();
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Bike Model is exists in this price announcement. Do you want to update " + modelName + " , Details ?");
                if (showConfirmDialog == JOptionPane.YES_OPTION) {
                    try {
                        BikeModel bikeModel1 = getBikeModel(modelName);
                        bikeModel.setBikeModelId(bikeModel1.getBikeModelId());
                        boolean update = PriceAnnouncementControllerClient.updateBikeModel(bikeModel);
                        if (update) {
                            setBikeModel();

                            capacityText.setText("");
                            optionList.setModel(new DefaultListModel());
                            inclusivePrice.setText("");
                            commissionRetained.setText("");

                            JOptionPane.showMessageDialog(this, "Price announcement item updated successfully !");
                            modelNameCombo.requestFocus();
                        } else {
                            JOptionPane.showMessageDialog(this, "Updated failed !");
                        }
                    } catch (RemoteException | ClassNotFoundException | SQLException | NotBoundException | MalformedURLException ex) {
                        Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Model Name , Capacity , Inclusive price and Commision is Required. check again !");
        }
//?        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void addNewOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewOptionActionPerformed
        AddNewOption addNewOption = new AddNewOption(this, true);
        addNewOption.setParentFrame(this);
        addNewOption.setVisible(true);
    }//GEN-LAST:event_addNewOptionActionPerformed

    private void priceAnnouncementComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_priceAnnouncementComboItemStateChanged

    }//GEN-LAST:event_priceAnnouncementComboItemStateChanged

    private void priceAnnouncementComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceAnnouncementComboActionPerformed
        PriceAnnouncementModel selectedPriceAnnoucement = getSelectedPriceAnnoucement();
        if (selectedPriceAnnoucement != null) {
            priceAnnoucementId = selectedPriceAnnoucement.getPriceAnnouncementId();
        }
        if (priceAnnouncementTableModel != null) {
            try {
                setBikeModel();
            } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_priceAnnouncementComboActionPerformed

    private void addOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOptionActionPerformed
        if (optionCombo.getItemCount() > 0) {
            ListModel model = optionList.getModel();
            DefaultListModel defaultListModel = new DefaultListModel();
            String optionName = (String) optionCombo.getSelectedItem();
            boolean isExists = false;
            for (int i = 0; i < model.getSize(); i++) {
                defaultListModel.addElement(model.getElementAt(i));
                if (optionName.equals(model.getElementAt(i))) {
                    isExists = true;
                }
            }
            if (!isExists) {
                defaultListModel.addElement(optionCombo.getSelectedItem());
            } else {
                JOptionPane.showMessageDialog(this, "Option is already exists !");
            }
            optionList.setModel(defaultListModel);
        } else {
            JOptionPane.showMessageDialog(this, "Option box is empty !");
        }
    }//GEN-LAST:event_addOptionActionPerformed

    private void modelNameComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_modelNameComboKeyReleased
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            modelNameCombo.setSelectedIndex(0);
            capacityText.requestFocus();
        }
    }//GEN-LAST:event_modelNameComboKeyReleased

    private void addOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOption1ActionPerformed
        if (optionList.getSelectedIndex() != -1) {
            DefaultListModel model = (DefaultListModel) optionList.getModel();
            model.remove(optionList.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(this, "Select Option To Delete !");
        }
    }//GEN-LAST:event_addOption1ActionPerformed

    private void newPriceAnnouncement2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement2ActionPerformed
        SpecialConsignment specialConsignment = new SpecialConsignment(this, true);
        specialConsignment.setPriceAnnoucementDate((String) priceAnnouncementCombo.getSelectedItem());
        specialConsignment.setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement2ActionPerformed

    private void newPriceAnnouncement3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement3ActionPerformed
        AddNewModel addNewModel = new AddNewModel(this, true);
        addNewModel.setParentFrame(this);
        addNewModel.setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement3ActionPerformed

    private void modelNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameComboActionPerformed
       
    }//GEN-LAST:event_modelNameComboActionPerformed

    private void capacityTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_capacityTextKeyReleased
        Validation v = new Validation();
        v.validateNumber(capacityText);
    }//GEN-LAST:event_capacityTextKeyReleased

    private void inclusivePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inclusivePriceKeyReleased
        Validation v = new Validation();
        v.inputCurrancy(inclusivePrice);

    }//GEN-LAST:event_inclusivePriceKeyReleased

    private void commissionRetainedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_commissionRetainedKeyReleased
        Validation v = new Validation();
        v.inputCurrancy(commissionRetained);

    }//GEN-LAST:event_commissionRetainedKeyReleased

    private void deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowActionPerformed
        if (priceAnnouncementTable.getSelectedRow() > -1) {

            String modelName = (String) priceAnnouncementTable.getValueAt(priceAnnouncementTable.getSelectedRow(), 0);
            BikeModel selectedModel = getBikeModel(modelName);
            DeletePriceAnnouncementId deletePriceAnnouncementId = new DeletePriceAnnouncementId(this, true);

            if (selectedModel != null) {
                try {
                    boolean canDelete = true;

                    ArrayList<OrderModel> orders = PriceAnnouncementControllerClient.getOrders(selectedModel.getBikeModelId());

                    if (orders.size() > 0) {
                        deletePriceAnnouncementId.setOrders(orders, modelName);
                        canDelete = false;
                    }

                    ArrayList<SpecialDealerModel> htc = PriceAnnouncementControllerClient.getHtc(selectedModel.getBikeModelId());
                    if (htc.size() > 0) {
                        deletePriceAnnouncementId.setHTC(htc, modelName);
                        canDelete = false;
                    }

                    if (canDelete) {
                        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are your sure to delete price announcement bike Model ?");
                        if (showConfirmDialog == JOptionPane.YES_OPTION) {
                            boolean deletePriceAnnouncementId1 = PriceAnnouncementControllerClient.deletePriceAnnouncementId(selectedModel.getBikeModelId());
                            if (deletePriceAnnouncementId1) {
                                priceAnnouncementTableModel.removeRow(priceAnnouncementTable.getSelectedRow());
                                JOptionPane.showMessageDialog(this, "Price annouoncement Bike Model deleted successfully !");
                            }
                        }
                    } else {
                        deletePriceAnnouncementId.setAnnouncementModel(priceAnnouncementTableModel, priceAnnouncementTable.getSelectedRow(), selectedModel.getBikeModelId());
                        deletePriceAnnouncementId.setVisible(true);
                    }

                } catch (RemoteException | ClassNotFoundException | SQLException | NotBoundException | MalformedURLException ex) {
                    Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Select Row To Delete !");
        }

    }//GEN-LAST:event_deleteRowActionPerformed

    private void priceAnnouncementTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceAnnouncementTableMouseClicked
        if (evt.getClickCount() == 2) {
            String modelName = (String) priceAnnouncementTableModel.getValueAt(priceAnnouncementTable.getSelectedRow(), 0);
            String capacity = (String) priceAnnouncementTableModel.getValueAt(priceAnnouncementTable.getSelectedRow(), 1);
            String option = (String) priceAnnouncementTableModel.getValueAt(priceAnnouncementTable.getSelectedRow(), 2);
            String price = (String) priceAnnouncementTableModel.getValueAt(priceAnnouncementTable.getSelectedRow(), 3);
            String commision = (String) priceAnnouncementTableModel.getValueAt(priceAnnouncementTable.getSelectedRow(), 4);

            String op[] = option.split("-");

            ListModel model = optionList.getModel();
            DefaultListModel defaultListModel = new DefaultListModel();
            String optionName = option;

            for (int i = 0; i < op.length; i++) {
                defaultListModel.addElement(op[i].trim());
            }

            modelNameCombo.setSelectedItem(modelName);
            capacityText.setText(capacity);
            inclusivePrice.setText(price);
            commissionRetained.setText(commision);
            optionList.setModel(defaultListModel);
        }
    }//GEN-LAST:event_priceAnnouncementTableMouseClicked

    private void inclusivePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inclusivePriceActionPerformed
        commissionRetained.requestFocus();
    }//GEN-LAST:event_inclusivePriceActionPerformed

    private void commissionRetainedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commissionRetainedActionPerformed
        addButton.doClick();
    }//GEN-LAST:event_commissionRetainedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagePriceAnnouncement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagePriceAnnouncement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addNewOption;
    private javax.swing.JButton addOption;
    private javax.swing.JButton addOption1;
    private javax.swing.JTextField capacityText;
    private javax.swing.JTextField commissionRetained;
    private javax.swing.JButton deleteRow;
    private javax.swing.JCheckBox helmetCheque;
    private javax.swing.JTextField inclusivePrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jacketCheque;
    private javax.swing.JComboBox modelNameCombo;
    private javax.swing.JButton newPriceAnnouncement;
    private javax.swing.JButton newPriceAnnouncement2;
    private javax.swing.JButton newPriceAnnouncement3;
    private javax.swing.JLabel option;
    private javax.swing.JComboBox optionCombo;
    private javax.swing.JList optionList;
    private javax.swing.JComboBox priceAnnouncementCombo;
    private javax.swing.JTable priceAnnouncementTable;
    // End of variables declaration//GEN-END:variables

    private ArrayList<PriceAnnouncementModel> priceAnnouncementModels;
    private String priceAnnoucementId;
    private DefaultTableModel priceAnnouncementTableModel;
    private ArrayList<Model> models;
    private ArrayList<BikeModel> allBikeModel;

    public Model getSelectedModel(String modelName) {
        for (Model model : models) {
            if (modelName.toUpperCase().equals(model.getModelName().toUpperCase())) {
                return model;
            }
        }
        return null;
    }

    public void addPriceAnnoucement(PriceAnnouncementModel priceAnnouncementModel) {
        priceAnnouncementCombo.addItem(priceAnnouncementModel.getPriceAnnouncementDate());
        priceAnnouncementModels.add(priceAnnouncementModel);
    }

    public void addOption(String option) {
        optionCombo.addItem(option);
    }

    public PriceAnnouncementModel getSelectedPriceAnnoucement() {
        String priceAnnoucementDate = (String) priceAnnouncementCombo.getSelectedItem();
        for (int i = 0; i < priceAnnouncementModels.size(); i++) {
            PriceAnnouncementModel priceAnnouncementModel = priceAnnouncementModels.get(i);
            if (priceAnnouncementModel.getPriceAnnouncementDate().equals(priceAnnoucementDate)) {
                return priceAnnouncementModel;
            }
        }
        return null;
    }

    public void addModelName(Model model) {
        modelNameCombo.addItem(model.getModelName().toUpperCase());
        models.add(model);
    }

    public void setBikeModel() throws NotBoundException, MalformedURLException, RemoteException, SQLException, ClassNotFoundException {
        allBikeModel = PriceAnnouncementControllerClient.getAllBikeModel(priceAnnoucementId);
        priceAnnouncementTableModel.setRowCount(0);
        for (BikeModel bikeModel : allBikeModel) {
            setBikeModelToTable(bikeModel);
        }
    }

    public void setBikeModelToTable(BikeModel bikeModel) {
        double commission = Double.parseDouble(bikeModel.getCommision());
        double netAmount = Double.parseDouble(bikeModel.getNetAmount());
        Object[] row = {bikeModel.getModelName().toUpperCase(), bikeModel.getCapacity(), bikeModel.getBikeOption().toUpperCase(), bikeModel.getNetAmount(), bikeModel.getCommision(), String.valueOf(netAmount - commission)};
        priceAnnouncementTableModel.addRow(row);
    }

    /**
     * return options in list box
     *
     * @return
     */
    public String getOptionLine() {
        ListModel model = optionList.getModel();
        String optionLine = "";
        DefaultListModel defaultListModel = new DefaultListModel();
        for (int i = 0; i < model.getSize(); i++) {
            optionLine += model.getElementAt(i) + " + ";
        }
        if (optionLine != "") {
            optionLine = optionLine.substring(0, optionLine.length() - 2);
            return optionLine;
        }
        return "";
    }

    public boolean isExistModel(String modelName) {
        for (int i = 0; i < priceAnnouncementTableModel.getRowCount(); i++) {
            String modelNameFromTable = (String) priceAnnouncementTableModel.getValueAt(i, 0);
            if (modelNameFromTable.toUpperCase().equals(modelName.toUpperCase())) {
                return true;
            }
        }
        return false;
    }

    public BikeModel getBikeModel(String bikeName) {
        for (BikeModel bikeModel : allBikeModel) {
            String name = bikeModel.getModelName();
            if (name.toUpperCase().equals(bikeName.toUpperCase())) {
                return bikeModel;
            }
        }
        return null;
    }
    

}
