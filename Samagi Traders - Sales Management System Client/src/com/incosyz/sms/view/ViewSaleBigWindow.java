/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incosyz.sms.view;

import com.incosyz.sms.clientcontroller.OrderControllerClient;
import com.incosyz.sms.clientcontroller.SaleControllerImplClient;
import com.incosyz.sms.config.Setting;
import com.incosyz.sms.dialog.DateSearchOrder;
import com.incosyz.sms.dialog.EditSale;
import com.incosyz.sms.dialog.LeasingPayment;
import com.incosyz.sms.dialog.LoadingData;
//import com.incosyz.sms.dialog.SettingOrderView;
import com.incosyz.sms.dialog.MailSending;
import com.incosyz.sms.mixmodel.GETOrderModel;
import com.incosyz.sms.model.CashModel;
import com.incosyz.sms.model.CheckModel;
import com.incosyz.sms.model.LeasingModel;
import com.incosyz.sms.model.NoteTableModel;
import com.incosyz.sms.model.OrderModel;
import com.incosyz.sms.model.RmvModel;
import com.incosyz.sms.observable.ViewSaleObservable;
import com.incosyz.sms.other.CurrancyFormat;
import com.incosyz.sms.other.Internet;
import com.incosyz.sms.other.SearchTable;
import com.incosyz.sms.other.SendOrderMail;
import com.incosyz.sms.other.TableFormat;
import com.incosyz.sms.pdfcontroller.OrderPDF;
import static com.incosyz.sms.view.Home.img;
import com.itextpdf.text.DocumentException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Stelan
 */
public class ViewSaleBigWindow extends javax.swing.JFrame {

    private ViewSaleObservable viewSaleObservable;

    /**
     * Creates new form ManagePriceAnnouncement
     */
    public ViewSaleBigWindow() {
        initComponents();
        setLocationRelativeTo(null);
        constructor();

        try {
            viewSaleObservable = new ViewSaleObservable(this);
            OrderControllerClient.addObserver(viewSaleObservable);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }

    public void constructor() {
        setIconImage(img);

        orderViewTableModel = (DefaultTableModel) orderViewTable.getModel();
        setAllOrders();
        
        String userType = Home.USER_MODEL.getUserType();
        if (userType.equals("Admin Account")) {
            deleteButton.setVisible(true);
        }else{
            deleteButton.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JPopupMenu();
        viewOrder = new javax.swing.JMenuItem();
        viewCheque = new javax.swing.JMenuItem();
        editOrder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mail = new javax.swing.JMenuItem();
        export = new javax.swing.JMenuItem();
        print = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        leasingMenu = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderViewTable = new javax.swing.JTable();
        searchByCombo = new javax.swing.JComboBox();
        searchText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        totalAmount = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        commisionText = new javax.swing.JLabel();
        newPriceAnnouncement2 = new javax.swing.JButton();
        newPriceAnnouncement3 = new javax.swing.JButton();
        newPriceAnnouncement4 = new javax.swing.JButton();
        newPriceAnnouncement5 = new javax.swing.JButton();
        pdfButton = new javax.swing.JButton();
        mailSendButton = new javax.swing.JButton();
        newPriceAnnouncement10 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        viewCombo = new javax.swing.JComboBox();
        leasingButton = new javax.swing.JButton();
        newPriceAnnouncement12 = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        menu.setPreferredSize(new java.awt.Dimension(200, 280));

        viewOrder.setText("View Order Info");
        viewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderActionPerformed(evt);
            }
        });
        menu.add(viewOrder);

        viewCheque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/viewChequeMiNI.png"))); // NOI18N
        viewCheque.setText("View Cheques");
        viewCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewChequeActionPerformed(evt);
            }
        });
        menu.add(viewCheque);

        editOrder.setText("Edit Order");
        editOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrderActionPerformed(evt);
            }
        });
        menu.add(editOrder);
        menu.add(jSeparator1);

        mail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/mainMini.png"))); // NOI18N
        mail.setText("Send To Mail");
        mail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailActionPerformed(evt);
            }
        });
        menu.add(mail);

        export.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/miniPDF.png"))); // NOI18N
        export.setText("Export To PDF");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        menu.add(export);

        print.setText("Print Order");
        menu.add(print);

        jMenu1.setText("Report");
        jMenu1.setToolTipText("");
        jMenu1.setPreferredSize(new java.awt.Dimension(145, 40));

        jMenuItem1.setText("Cash Sale Report");
        jMenuItem1.setPreferredSize(new java.awt.Dimension(131, 40));
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        leasingMenu.setText("Leasing Sale Report");
        leasingMenu.setPreferredSize(new java.awt.Dimension(145, 40));
        leasingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leasingMenuActionPerformed(evt);
            }
        });
        jMenu1.add(leasingMenu);

        menu.add(jMenu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Samagi Traders | Sales Management System | View Sales");
        setMinimumSize(new java.awt.Dimension(951, 469));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Samagi Traders - View Sales");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Sales Management System");

        orderViewTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        orderViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Round No", "Model Name", "Customer Name", "Order Amount", "Cash Amount", "Cheque Amount", "Leasing Amount", "Commision", "Date", "No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderViewTable.setGridColor(new java.awt.Color(204, 204, 204));
        orderViewTable.setRowHeight(25);
        orderViewTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        orderViewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderViewTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                orderViewTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                orderViewTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(orderViewTable);
        if (orderViewTable.getColumnModel().getColumnCount() > 0) {
            orderViewTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            orderViewTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            orderViewTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            orderViewTable.getColumnModel().getColumn(9).setPreferredWidth(10);
        }

        searchByCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchByCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Round No", "Model Name", "Customer Name", "Customer NIC", "Date", "Consignment No" }));

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Search :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Search By :");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        totalAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        totalAmount.setForeground(new java.awt.Color(102, 102, 102));
        totalAmount.setText("000000.00");

        jLabel6.setText("Total Amount : ");

        jLabel7.setText("Total Commision :");

        commisionText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        commisionText.setForeground(new java.awt.Color(102, 102, 102));
        commisionText.setText("000000.00");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commisionText, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(271, 271, 271))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmount)
                    .addComponent(commisionText))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        newPriceAnnouncement2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/newSale.jpg"))); // NOI18N
        newPriceAnnouncement2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement2ActionPerformed(evt);
            }
        });

        newPriceAnnouncement3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/editSale.jpg"))); // NOI18N
        newPriceAnnouncement3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement3ActionPerformed(evt);
            }
        });

        newPriceAnnouncement4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/viewInfo.jpg"))); // NOI18N
        newPriceAnnouncement4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement4ActionPerformed(evt);
            }
        });

        newPriceAnnouncement5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/advanceSearch_1.jpg"))); // NOI18N
        newPriceAnnouncement5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement5ActionPerformed(evt);
            }
        });

        pdfButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/pdf.jpg"))); // NOI18N
        pdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfButtonActionPerformed(evt);
            }
        });

        mailSendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/sendMail.jpg"))); // NOI18N
        mailSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailSendButtonActionPerformed(evt);
            }
        });

        newPriceAnnouncement10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/refresh.jpg"))); // NOI18N
        newPriceAnnouncement10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement10ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        viewCombo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "View All Sale", "View Daily Sales", "This Month Sales", "This Year Sales", "Payment Not Completed", "Payment Completed" }));
        viewCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        leasingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/leasing.jpg"))); // NOI18N
        leasingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leasingButtonActionPerformed(evt);
            }
        });

        newPriceAnnouncement12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/incosyz/sms/image/lesing.jpg"))); // NOI18N
        newPriceAnnouncement12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceAnnouncement12ActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPriceAnnouncement4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPriceAnnouncement5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mailSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leasingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPriceAnnouncement12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(newPriceAnnouncement3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newPriceAnnouncement2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newPriceAnnouncement4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newPriceAnnouncement5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mailSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newPriceAnnouncement10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(leasingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(newPriceAnnouncement12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderViewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderViewTableMouseClicked
        if (orderViewTable.getSelectedRow() > -1) {
            selectedGETOrderModel = orders.get(orderViewTable.getSelectedRow());

            RmvModel rmvModel = selectedGETOrderModel.getRmvModel();
            if (rmvModel != null) {
                String isLeasing = rmvModel.getIsLeasing();
                if (isLeasing.equals("1")) {
                    leasingButton.setEnabled(true);
                } else {
                    leasingButton.setEnabled(false);
                }
            }
        }


    }//GEN-LAST:event_orderViewTableMouseClicked

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void newPriceAnnouncement2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement2ActionPerformed
        new CreateNewSale().setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement2ActionPerformed

    private void newPriceAnnouncement3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement3ActionPerformed
        if (orderViewTable.getSelectedRow() > -1) {
            EditSale editSale = new EditSale(this, true);
            editSale.setFrame(this);
            editSale.setOrder(selectedGETOrderModel);
            editSale.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select Order to Edit & Update !");
        }
    }//GEN-LAST:event_newPriceAnnouncement3ActionPerformed

    private void newPriceAnnouncement4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement4ActionPerformed
        if (orderViewTable.getSelectedRow() > -1) {
            ViewOrderDetail detail = new ViewOrderDetail();
            detail.setFrame(this);
            detail.setDetail(selectedGETOrderModel);
            detail.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select Order to View !");
        }
    }//GEN-LAST:event_newPriceAnnouncement4ActionPerformed

    private void newPriceAnnouncement5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement5ActionPerformed
        DateSearchOrder dateSearchOrder = new DateSearchOrder(this, true);
        dateSearchOrder.setFrame(this);
        dateSearchOrder.setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement5ActionPerformed

    private void pdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfButtonActionPerformed
        String selectedItem = (String) viewCombo.getSelectedItem();
        String orderDescription = "";

        if (selectedItem.equals("View All Sale")) {
            orderDescription = "All Sales Report";
        } else if (selectedItem.equals("View Today Sales")) {
            DateFormat dateFormat = new SimpleDateFormat("ddd");
            orderDescription = "Today ( " + dateFormat.format(new Date()) + " ) Sales Report";
        } else if (selectedItem.equals("This Month Sales")) {
            DateFormat dateFormat = new SimpleDateFormat("mmm");
            orderDescription = "Monthly ( " + dateFormat.format(new Date()) + " ) Sales Report";
        } else if (selectedItem.equals("This Year Sales")) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy");
            orderDescription = "Annual ( " + dateFormat.format(new Date()) + " ) Sales Report";
        } else if (selectedItem.equals("Payment Not Completed")) {
            orderDescription = "Orders that payments not completed";
        } else if (selectedItem.equals("Payment Completed")) {
            orderDescription = "Orders that payments completed";
        }

        JFileChooser chooser = new JFileChooser();
        int showSaveDialog = chooser.showSaveDialog(this);
        if (showSaveDialog == JFileChooser.OPEN_DIALOG) {
            OrderPDF orderPDF = new OrderPDF();
            String filePath = chooser.getSelectedFile().getPath() + ".pdf";
            try {
                orderPDF.generateOrderPdf(orders, filePath, orderDescription);
            } catch (FileNotFoundException | DocumentException ex) {
                Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_pdfButtonActionPerformed

    private void mailSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailSendButtonActionPerformed

        if (Internet.isInternetAvailable()) {

            final OrderPDF orderPDF = new OrderPDF();
            final MailSending s = new MailSending(this, false);

            new Thread() {

                @Override
                public void run() {
                    String selectedItem = (String) viewCombo.getSelectedItem();
                    String orderDescription = "";

                    if (selectedItem.equals("View All Sale")) {
                        orderDescription = "All Sales Report";
                    } else if (selectedItem.equals("View Today Sales")) {
                        DateFormat dateFormat = new SimpleDateFormat("ddd");
                        orderDescription = "Today ( " + dateFormat.format(new Date()) + " ) Sales Report";
                    } else if (selectedItem.equals("This Month Sales")) {
                        DateFormat dateFormat = new SimpleDateFormat("mmm");
                        orderDescription = "Monthly ( " + dateFormat.format(new Date()) + " ) Sales Report";
                    } else if (selectedItem.equals("This Year Sales")) {
                        DateFormat dateFormat = new SimpleDateFormat("yyyy");
                        orderDescription = "Annual ( " + dateFormat.format(new Date()) + " ) Sales Report";
                    } else if (selectedItem.equals("Payment Not Completed")) {
                        orderDescription = "Orders that payments not completed";
                    } else if (selectedItem.equals("Payment Completed")) {
                        orderDescription = "Orders that payments completed";
                    }

                    s.setVisible(true);
                    mailSendButton.setEnabled(false);
                    try {
                        orderPDF.sendPdf(orders, orderDescription);
                    } catch (DocumentException | MessagingException ex) {
                        Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    s.setVisible(false);
                    mailSendButton.setEnabled(true);
                }

            }.start();

        } else {
            JOptionPane.showMessageDialog(this, "Internet is not available !");
        }

    }//GEN-LAST:event_mailSendButtonActionPerformed

    private void newPriceAnnouncement10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement10ActionPerformed

        setAllOrders();

    }//GEN-LAST:event_newPriceAnnouncement10ActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        try {
            SearchTable searchTable = new SearchTable();
            ArrayList<GETOrderModel> filterTable = null;
            if (searchByCombo.getSelectedItem().equals("Round No")) {
                filterTable = searchTable.filterTable(allOrders, 0, searchText.getText());
            } else if (searchByCombo.getSelectedItem().equals("Model Name")) {
                filterTable = searchTable.filterTable(allOrders, 1, searchText.getText());
            } else if (searchByCombo.getSelectedItem().equals("Customer Name")) {
                filterTable = searchTable.filterTable(allOrders, 2, searchText.getText());
            } else if (searchByCombo.getSelectedItem().equals("Customer NIC")) {
                filterTable = searchTable.filterTable(allOrders, 3, searchText.getText());
            } else if (searchByCombo.getSelectedItem().equals("Date")) {
                filterTable = searchTable.filterTable(allOrders, 4, searchText.getText());
            } else if (searchByCombo.getSelectedItem().equals("Consignment No")) {
                filterTable = searchTable.filterTable(allOrders, 5, searchText.getText());
            }

            addRows(filterTable);
        } catch (SQLException | ClassNotFoundException | RemoteException | MalformedURLException | NotBoundException ex) {
            Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchTextKeyReleased

    private void orderViewTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderViewTableMouseReleased
        if (SwingUtilities.isRightMouseButton(evt) == true) {
            int row = orderViewTable.rowAtPoint(evt.getPoint());

            orderViewTable.clearSelection();
            orderViewTable.addRowSelectionInterval(row, row);
            //your popup menu goes here.
            if (orderViewTable.getSelectedRow() > -1) {
                selectedGETOrderModel = orders.get(orderViewTable.getSelectedRow());
            }
        }
        if (orderViewTable.getSelectedRow() > -1) {
            if (evt.isPopupTrigger()) {
                if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
                    GETOrderModel selectedOrder = getSelectedOrder();
                    String roundNo = (String) orderViewTableModel.getValueAt(orderViewTable.getSelectedRow(), 5);
                    if (roundNo.equals("0.00")) {
                        viewCheque.setEnabled(false);
                    } else {
                        viewCheque.setEnabled(true);
                    }

                    menu.show(orderViewTable, evt.getX(), evt.getY());
                }
            }
        }

    }//GEN-LAST:event_orderViewTableMouseReleased

    private void viewChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewChequeActionPerformed
        GETOrderModel selectedOrder = getSelectedOrder();
        ManageCheque cheque = new ManageCheque(selectedOrder.getPaymentModel().getPaymentId());
        cheque.setVisible(true);
    }//GEN-LAST:event_viewChequeActionPerformed

    private void mailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailActionPerformed
        boolean internetAvailable = Internet.isInternetAvailable();
        if (internetAvailable) {
            final MailSending sending = new MailSending(this, false);
            new Thread() {

                @Override
                public void run() {

                    sending.setVisible(true);

                    GETOrderModel selectedOrder = getSelectedOrder();
                    SendOrderMail mail = new SendOrderMail();
                    try {
                        mail.sendOrder(selectedGETOrderModel, "");
                    } catch (IOException ex) {
                        Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MessagingException ex) {
                        Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    sending.setVisible(false);
                }

            }.start();

        } else {
            JOptionPane.showMessageDialog(this, "Internet is not available. sending failed !");
        }

    }//GEN-LAST:event_mailActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        final ViewSaleBigWindow bigWindow = this;
        new Thread() {

            @Override
            public void run() {
                JFileChooser fileChooser = new JFileChooser();

                fileChooser.setFileFilter(new FileNameExtensionFilter("PDF File", ".pdf"));
                int showSaveDialog = fileChooser.showSaveDialog(bigWindow);
                if (showSaveDialog == JFileChooser.OPEN_DIALOG) {
                    File selectedFile = fileChooser.getSelectedFile();
                    SendOrderMail mail = new SendOrderMail();

                    try {
                        mail.savePdf(getSelectedOrder(), selectedFile.getPath());
                    } catch (IOException | DocumentException ex) {
                        Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        }.start();

    }//GEN-LAST:event_exportActionPerformed

    private void viewComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewComboActionPerformed
        try {
            if (viewCombo.getSelectedItem().equals("View All Sale")) {
                addRows(allOrders);
            } else if (viewCombo.getSelectedItem().equals("View Today Sales")) {
                ArrayList<GETOrderModel> todaySales = getTodaySales();
                addRows(todaySales);
            } else if (viewCombo.getSelectedItem().equals("This Month Sales")) {
                ArrayList<GETOrderModel> todaySales = getThisMonth();
                addRows(todaySales);
            } else if (viewCombo.getSelectedItem().equals("This Year Sales")) {
                ArrayList<GETOrderModel> todaySales = getThisYear();
                addRows(todaySales);
            } else if (viewCombo.getSelectedItem().equals("Payment Not Completed")) {
                ArrayList<GETOrderModel> todaySales = getPaymentNotCompleted();
                addRows(todaySales);
            } else if (viewCombo.getSelectedItem().equals("Payment Completed")) {
                ArrayList<GETOrderModel> todaySales = getPaymentCompleted();
                addRows(todaySales);
            }

        } catch (SQLException | ClassNotFoundException | RemoteException | MalformedURLException | NotBoundException ex) {
            Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewComboActionPerformed

    private void editOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrderActionPerformed
        if (orderViewTable.getSelectedRow() > -1) {
            EditSale editSale = new EditSale(this, true);
            editSale.setFrame(this);
            editSale.setOrder(selectedGETOrderModel);
            editSale.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select Order to Edit & Update !");
        }
    }//GEN-LAST:event_editOrderActionPerformed

    private void viewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderActionPerformed
        if (orderViewTable.getSelectedRow() > -1) {
            ViewOrderDetail detail = new ViewOrderDetail();
            detail.setFrame(this);
            detail.setDetail(selectedGETOrderModel);
            detail.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select Order to View !");
        }
    }//GEN-LAST:event_viewOrderActionPerformed

    private void orderViewTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderViewTableMousePressed

    }//GEN-LAST:event_orderViewTableMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            OrderControllerClient.removeObserver(viewSaleObservable);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        DailySalesReport dailySalesReport = new DailySalesReport();
        dailySalesReport.setDetail(selectedGETOrderModel);
        dailySalesReport.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void leasingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leasingMenuActionPerformed
        LeasingSaleReport leasingSaleReport = new LeasingSaleReport();
        leasingSaleReport.setDetail(selectedGETOrderModel);
        leasingSaleReport.setVisible(true);
    }//GEN-LAST:event_leasingMenuActionPerformed

    private void leasingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leasingButtonActionPerformed
        if (orderViewTable.getSelectedRow() > -1) {
            RmvModel rmvModel = selectedGETOrderModel.getRmvModel();
            String isLeasing = rmvModel.getIsLeasing();
            if (isLeasing.equals("1")) {
                LeasingPayment leasingPayment = new LeasingPayment(this, true);
                leasingPayment.setDetail(selectedGETOrderModel);
                leasingPayment.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Not leaasing payment order !");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select order !");
        }
    }//GEN-LAST:event_leasingButtonActionPerformed

    private void newPriceAnnouncement12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceAnnouncement12ActionPerformed
        ViewLeasingSale leasingSale = new ViewLeasingSale();
        leasingSale.setVisible(true);
    }//GEN-LAST:event_newPriceAnnouncement12ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if (orderViewTable.getSelectedRow() > -1) {

            String roundNo = (String) orderViewTable.getValueAt(orderViewTable.getSelectedRow(), 0);
            System.out.println(roundNo);
            int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are you sure to delete RoundNo : " + roundNo + " Sale ?", "Sale Delete", JOptionPane.YES_NO_OPTION);

            if (showConfirmDialog == JOptionPane.YES_OPTION) {
                try {
                    boolean deleteSale = SaleControllerImplClient.deleteSale(roundNo);
                    if (deleteSale) {
                        DefaultTableModel defaultTableModel = (DefaultTableModel) orderViewTable.getModel();
                        defaultTableModel.removeRow(orderViewTable.getSelectedRow());
                        JOptionPane.showMessageDialog(this, "Sale Deleted Successfully !");
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSaleBigWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSaleBigWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSaleBigWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSaleBigWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSaleBigWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel commisionText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem editOrder;
    private javax.swing.JMenuItem export;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton leasingButton;
    private javax.swing.JMenuItem leasingMenu;
    private javax.swing.JMenuItem mail;
    private javax.swing.JButton mailSendButton;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JButton newPriceAnnouncement10;
    private javax.swing.JButton newPriceAnnouncement12;
    private javax.swing.JButton newPriceAnnouncement2;
    private javax.swing.JButton newPriceAnnouncement3;
    private javax.swing.JButton newPriceAnnouncement4;
    private javax.swing.JButton newPriceAnnouncement5;
    private javax.swing.JTable orderViewTable;
    private javax.swing.JButton pdfButton;
    private javax.swing.JMenuItem print;
    private javax.swing.JComboBox searchByCombo;
    private javax.swing.JTextField searchText;
    private javax.swing.JLabel totalAmount;
    private javax.swing.JMenuItem viewCheque;
    private javax.swing.JComboBox viewCombo;
    private javax.swing.JMenuItem viewOrder;
    // End of variables declaration//GEN-END:variables

    private ArrayList<GETOrderModel> allOrders;
    private ArrayList<GETOrderModel> orders;
    private DefaultTableModel orderViewTableModel;
    private GETOrderModel selectedGETOrderModel;

    private double totalOrderAmount = 0;
    private double commisionAmount = 0;

    private ArrayList<Integer> orderAmountNotPaidCell;
    private ArrayList<Integer> cashAmountZero;
    private ArrayList<Integer> chequeAmountZero;
    private ArrayList<Integer> leasingAmountZero;
    private ArrayList<Integer> reported;

    private double tvsAmount = 0;

    public void setAllOrders() {
        final LoadingData data = new LoadingData(this, false);
        new Thread() {
            @Override
            public void run() {
                data.setVisible(true);
                try {
                    String property = new Setting().getProperty("TBL_R_COUNT");
                    if (property == null) {
                        property = "0";
                    }
                    allOrders = OrderControllerClient.getOrders(Integer.parseInt(property), 0);
                    addRows(allOrders);
                } catch (IOException | NotBoundException | ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                data.setVisible(false);
            }

        }.start();
    }

    public void addRows(ArrayList<GETOrderModel> gETOrderModels) throws SQLException, ClassNotFoundException, RemoteException, MalformedURLException, NotBoundException {
        this.orders = gETOrderModels;
        totalOrderAmount = 0;
        commisionAmount = 0;
        orderViewTableModel.setRowCount(0);

        reported = new ArrayList<>();
        orderAmountNotPaidCell = new ArrayList<>();
        cashAmountZero = new ArrayList<>();
        chequeAmountZero = new ArrayList<>();
        leasingAmountZero = new ArrayList<>();

        for (GETOrderModel gETOrderModel : orders) {
            addRow(gETOrderModel);
        }
        totalAmount.setText("Rs " + CurrancyFormat.getCurrancyFormat(totalOrderAmount));
        commisionText.setText("Rs " + CurrancyFormat.getCurrancyFormat(commisionAmount));

        try {
            changeOrderAmountNotPaidCell();
            changeChequeAmountZero();
            changeCashAmountZero();
            changeLeasingAmountZero();
            reportedColor();
        } catch (IOException ex) {
            Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

//        count.setText(String.valueOf(gETOrderModels.size()));
    }

    public void changeOrderAmountNotPaidCell() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(orderAmountNotPaidCell);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("OANOTPAID_B_R")), Integer.parseInt(s.getProperty("OANOTPAID_B_G")), Integer.parseInt(s.getProperty("OANOTPAID_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("OANOTPAID_F_R")), Integer.parseInt(s.getProperty("OANOTPAID_F_G")), Integer.parseInt(s.getProperty("OANOTPAID_F_B")));
        orderViewTable.getColumnModel().getColumn(2).setCellRenderer(tableFormat);
    }

    public void changeCashAmountZero() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(cashAmountZero);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("CAZERO_B_R")), Integer.parseInt(s.getProperty("CAZERO_B_G")), Integer.parseInt(s.getProperty("CAZERO_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("CAZERO_F_R")), Integer.parseInt(s.getProperty("CAZERO_F_G")), Integer.parseInt(s.getProperty("CAZERO_F_B")));
        orderViewTable.getColumnModel().getColumn(4).setCellRenderer(tableFormat);
    }

    public void changeChequeAmountZero() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(chequeAmountZero);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("CHAZERO_B_R")), Integer.parseInt(s.getProperty("CHAZERO_B_G")), Integer.parseInt(s.getProperty("CHAZERO_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("CHAZERO_F_R")), Integer.parseInt(s.getProperty("CHAZERO_F_G")), Integer.parseInt(s.getProperty("CHAZERO_F_B")));
        orderViewTable.getColumnModel().getColumn(5).setCellRenderer(tableFormat);
    }

    public void changeLeasingAmountZero() throws IOException {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(leasingAmountZero);
        Setting s = new Setting();
        tableFormat.setCellBackground(Integer.parseInt(s.getProperty("LAZERO_B_R")), Integer.parseInt(s.getProperty("LAZERO_B_G")), Integer.parseInt(s.getProperty("LAZERO_B_B")));
        tableFormat.setCellForeground(Integer.parseInt(s.getProperty("LAZERO_F_R")), Integer.parseInt(s.getProperty("LAZERO_F_G")), Integer.parseInt(s.getProperty("LAZERO_F_B")));
        orderViewTable.getColumnModel().getColumn(6).setCellRenderer(tableFormat);
    }

    public void reportedColor() {
        TableFormat tableFormat = new TableFormat();
        tableFormat.setNotPayList(reported);
        tableFormat.setCellBackground(255, 0, 0);
        tableFormat.setCellForeground(255, 255, 255);
        orderViewTable.getColumnModel().getColumn(9).setCellRenderer(tableFormat);
    }

    public void addRow(GETOrderModel gETOrderModel) {
        String roundNo = gETOrderModel.getOrderModel().getRoundNo();
        String modelName = gETOrderModel.getModel().getModelName();
        String customerName = gETOrderModel.getCustomerModel().getCustomerName();
        String fullAmount = gETOrderModel.getOrderModel().getOrderAmount();
        String commision = gETOrderModel.getPaymentModel().getCommision();

        String leasing = "0";

        if (gETOrderModel.getLeasingModel() != null) {
            leasing = gETOrderModel.getLeasingModel().getLeasingAmount();
        }

        String date = gETOrderModel.getOrderModel().getOrderDate();

        double totalCash = 0;
        if (gETOrderModel.getCashModels() != null) {
            ArrayList<CashModel> cashModels = gETOrderModel.getCashModels();
            for (CashModel cashModel : cashModels) {
                totalCash += Double.parseDouble(cashModel.getCashAmount());
            }
        }

        double totalCheck = 0;
        if (gETOrderModel.getCheckModels() != null) {
            ArrayList<CheckModel> checkModels = gETOrderModel.getCheckModels();
            for (CheckModel checkModel : checkModels) {
                totalCheck += Double.parseDouble(checkModel.getAmount());
            }

        }
        double leasingAmount = Double.parseDouble(leasing);

        double orderAmount = Double.parseDouble(fullAmount);
        LeasingModel leasingModel = gETOrderModel.getLeasingModel();
        if (leasingModel != null) {
            double snCharge = Double.parseDouble(leasingModel.getSnCharge());
            orderAmount += snCharge;
        }

        OrderModel orderModel = gETOrderModel.getOrderModel();
        if (orderModel != null) {
            String orderId = orderModel.getOrderId();
            try {
                NoteTableModel infoNoteTable = SaleControllerImplClient.getInfoNoteTable(orderId);
                if (infoNoteTable != null) {
                    boolean equals = infoNoteTable.getIsReport().equals("1");
                    if (equals) {
                        reported.add(orderViewTable.getRowCount());
                    }
                }
            } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(ViewSaleBigWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        totalOrderAmount += orderAmount;
        commisionAmount += Double.parseDouble(commision);
        Object[] row = {
            roundNo, modelName.toUpperCase(),
            customerName, CurrancyFormat.getCurrancyFormat(orderAmount),
            CurrancyFormat.getCurrancyFormat(totalCash),
            CurrancyFormat.getCurrancyFormat(totalCheck),
            CurrancyFormat.getCurrancyFormat(leasing),
            CurrancyFormat.getCurrancyFormat(commision),
            date,
            String.valueOf(orderViewTableModel.getRowCount() + 1)
        };
        orderViewTableModel.addRow(row);

        double tot = leasingAmount + totalCash + totalCheck;
        if (tot < orderAmount) {
            orderAmountNotPaidCell.add(orderViewTable.getRowCount() - 1);
        }

        if (totalCash != 0) {
            cashAmountZero.add(orderViewTable.getRowCount() - 1);
        }
        if (totalCheck != 0) {
            chequeAmountZero.add(orderViewTable.getRowCount() - 1);
        }
        if (leasingAmount != 0) {
            leasingAmountZero.add(orderViewTable.getRowCount() - 1);
        }

    }

    public GETOrderModel getSelectedOrder() {
        if (orderViewTable.getSelectedRow() > -1) {
            String roundNo = (String) orderViewTableModel.getValueAt(orderViewTable.getSelectedRow(), 0);
            for (GETOrderModel gETOrderModel : orders) {
                if (gETOrderModel.getStockModel().getRoundNo().equals(roundNo)) {
                    return gETOrderModel;
                }
            }
        }
        return null;
    }

    public ArrayList<GETOrderModel> getTodaySales() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String today = dateFormat.format(new Date());

        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            String todayDate = gETOrderModel.getOrderModel().getOrderDate();
            if (todayDate.equals(today)) {
                temp.add(gETOrderModel);
            }
        }
        return temp;
    }

    public ArrayList<GETOrderModel> getThisMonth() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM");
        String month = dateFormat.format(new Date());

        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            String todayDate = gETOrderModel.getOrderModel().getOrderDate();
            String thisMonth = todayDate.substring(0, todayDate.length() - 3);
            if (thisMonth.equals(month)) {
                temp.add(gETOrderModel);
            }
        }
        return temp;
    }

    public void setMonth(Date d1, Date d2) throws ParseException, SQLException, ClassNotFoundException, RemoteException, MalformedURLException, NotBoundException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        ArrayList<GETOrderModel> orders1 = OrderControllerClient.getOrders(dateFormat.format(d1), dateFormat.format(d2));
        addRows(orders1);
        allOrders = orders1;
    }

    public ArrayList<GETOrderModel> getMonth(Date d1, Date d2) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            String todayDate = gETOrderModel.getOrderModel().getOrderDate();
            Date today = dateFormat.parse(todayDate);

            if (today.after(d1) && today.before(d2)) {
                temp.add(gETOrderModel);
            }
        }
        return temp;
    }

    public ArrayList<GETOrderModel> getThisYear() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy");
        String year = dateFormat.format(new Date());

        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            String todayDate = gETOrderModel.getOrderModel().getOrderDate();
            String thisYear = todayDate.substring(0, todayDate.length() - 6);
            if (thisYear.equals(year)) {
                temp.add(gETOrderModel);
            }
        }
        return temp;
    }

    public ArrayList<GETOrderModel> getPaymentNotCompleted() {
        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            double orderAmount = Double.parseDouble(gETOrderModel.getOrderModel().getOrderAmount());

            String leasing = "0";

            if (gETOrderModel.getLeasingModel() != null) {
                leasing = gETOrderModel.getLeasingModel().getLeasingAmount();
            }

            String date = gETOrderModel.getOrderModel().getOrderDate();

            double totalCash = 0;
            if (gETOrderModel.getCashModels() != null) {
                ArrayList<CashModel> cashModels = gETOrderModel.getCashModels();
                for (CashModel cashModel : cashModels) {
                    totalCash += Double.parseDouble(cashModel.getCashAmount());
                }
            }

            double totalCheck = 0;
            if (gETOrderModel.getCheckModels() != null) {
                ArrayList<CheckModel> checkModels = gETOrderModel.getCheckModels();
                for (CheckModel checkModel : checkModels) {
                    totalCheck += Double.parseDouble(checkModel.getAmount());
                }

            }
            double leasingAmount = Double.parseDouble(leasing);

            double totalPaid = totalCash + totalCheck + leasingAmount;

            if (totalPaid < orderAmount) {
                temp.add(gETOrderModel);
            }

        }
        return temp;
    }

    public ArrayList<GETOrderModel> getPaymentCompleted() {
        ArrayList<GETOrderModel> temp = new ArrayList<>();
        for (GETOrderModel gETOrderModel : allOrders) {
            double orderAmount = Double.parseDouble(gETOrderModel.getOrderModel().getOrderAmount());

            String leasing = "0";

            if (gETOrderModel.getLeasingModel() != null) {
                leasing = gETOrderModel.getLeasingModel().getLeasingAmount();
            }

            String date = gETOrderModel.getOrderModel().getOrderDate();

            double totalCash = 0;
            if (gETOrderModel.getCashModels() != null) {
                ArrayList<CashModel> cashModels = gETOrderModel.getCashModels();
                for (CashModel cashModel : cashModels) {
                    totalCash += Double.parseDouble(cashModel.getCashAmount());
                }
            }

            double totalCheck = 0;
            if (gETOrderModel.getCheckModels() != null) {
                ArrayList<CheckModel> checkModels = gETOrderModel.getCheckModels();
                for (CheckModel checkModel : checkModels) {
                    totalCheck += Double.parseDouble(checkModel.getAmount());
                }

            }
            double leasingAmount = Double.parseDouble(leasing);

            double totalPaid = totalCash + totalCheck + leasingAmount;

            if (totalPaid >= orderAmount) {
                temp.add(gETOrderModel);
            }

        }
        return temp;
    }

    public void addNewOrder(GETOrderModel gETOrderModel) {
        this.orders.add(gETOrderModel);
        addRow(gETOrderModel);

        totalAmount.setText("Rs " + CurrancyFormat.getCurrancyFormat(totalOrderAmount));
        commisionText.setText("Rs " + CurrancyFormat.getCurrancyFormat(commisionAmount));
    }

    public void setSelect(String roundNo) {
        for (int i = 0; i < orderViewTable.getRowCount(); i++) {
            String tableRoundNo = (String) orderViewTable.getValueAt(i, 0);
            if (tableRoundNo.equals(roundNo)) {
                orderViewTable.addRowSelectionInterval(i, i);
            }
        }
    }

}
